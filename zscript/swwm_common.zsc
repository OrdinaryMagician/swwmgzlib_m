// common code goes here

// extra sound channels for the mod
enum ESWWMGZChannels
{
	CHAN_YOUDONEFUCKEDUP = 63200,	// exception handler
	CHAN_VOICEOVER = 63201,		// voice acting
	CHAN_FOOTSTEP = 63202,		// footstep sounds and others
	CHAN_WEAPONEXTRA = 63203,	// additional weapon sounds (usually loops)
	CHAN_POWERUP = 63204,		// powerup sounds
	CHAN_POWERUPEXTRA = 63205,	// additional powerup sounds
	CHAN_PLAYEREXTRA = 63206,	// additional player sounds (usually loops)
	CHAN_ITEMEXTRA = 63207,		// additional item sounds
	CHAN_WEAPONEXTRA2 = 63208,	// additional weapon sound slot
	CHAN_WEAPONEXTRA3 = 63209,	// additional weapon sound slot (again)
	CHAN_DAMAGE = 63210,		// used for impact/hit sounds
	CHAN_AMBEXTRA = 63211,		// player ambience when submerged
	CHAN_VOICEOVERAUX = 63212,	// extra channel to make oneliner voices louder
	CHAN_VOICEOVERAUX2 = 63213,	// how many more channels do I need???
	CHAN_VOICEOVERAUX3 = 63214	// oh god, the loudening
};

const FallbackTag = "AWESOME IT'S PENIS"; // used on tag processing, please don't mind the actual string used)
const MaxBouncePerTic = 40;	// maximum simultaneous bounces in one tic for a lightweight actor before we consider it's stuck

// basic "does nothing" actor, used to remove stuff in CheckReplacement
Class SWWMNothing : Actor
{
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

// used for minimap stuff
Class SWWMExitMarker : MapMarker
{
	Default
	{
		Scale 2.;
		Args 0, 0, 1;
	}
	States
	{
	Spawn:
		EIXT ABCD -1;
		Stop;
	}
}
Class SWWMKeyMarker : MapMarker
{
	Default
	{
		Args 0, 0, 1;
		+DORMANT;
	}
	override void PostBeginPlay()
	{
		if ( !target )
		{
			Destroy();
			return;
		}
		if ( target is 'SWWMKey' )
		{
			Class<Key> k = SWWMKey(target).species;
			if ( k )
			{
				let def = GetDefaultByType(k);
				picnum = def.SpawnState.GetSpriteTexture(0);
			}
		}
		else picnum = target.SpawnState.GetSpriteTexture(0);
		Scale = target.Scale;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target )
		{
			Destroy();
			return;
		}
		bDORMANT = ((!level.allmap)||Inventory(target).Owner);
		if ( pos != target.pos ) SetOrigin(target.pos,true);
	}
}

// very lightweight combat tracker, more Souls-y
Class SWWMQuickCombatTracker : Inventory
{
	int lifespan, lasthealth, maxhealth;
	int laghealth[10];
	int cummdamage, cummspan, cummflash;	// please do not misread
	int fadein;	// used for the hud
	double lvheight;	// height while alive (used by the hud for positioning)
	SmoothDynamicValueInterpolator intp;
	SmoothLinearValueInterpolator intpl;

	static void Update( Actor target, int damage = 0 )
	{
		let t = SWWMQuickCombatTracker(target.FindInventory("SWWMQuickCombatTracker"));
		if ( t )
		{
			// re-fade in
			if ( t.lifespan < 20 ) t.fadein = t.lifespan/4;
			t.lifespan = max(t.lifespan,target.bISMONSTER?((damage>0)?700:70):((damage>0)?140:35));
			if ( damage > 0 )
			{
				t.cummdamage += damage;
				t.cummspan = target.bISMONSTER?120:30;
				t.cummflash = 15;
			}
			return;
		}
		t = SWWMQuickCombatTracker(Spawn("SWWMQuickCombatTracker"));
		t.AttachToOwner(target);
		t.maxhealth = target.SpawnHealth();
		t.lasthealth = target.health;
		int prevhealth = min(t.maxhealth,target.health+damage);	// guessed health before damage was dealt
		for ( int i=0; i<10; i++ ) t.laghealth[i] = prevhealth;
		if ( damage > 0 )
		{
			t.cummdamage = damage;
			t.cummspan = target.bISMONSTER?120:30;
			t.cummflash = 15;
		}
		t.intp = SmoothDynamicValueInterpolator.Create(t.lasthealth,.5,1,100);
		t.intpl = SmoothLinearValueInterpolator.Create(t.laghealth[9],max(1,t.maxhealth/20));
		t.lifespan = target.bISMONSTER?((damage>0)?700:70):((damage>0)?140:35);
		t.fadein = 0;
		t.lvheight = target.Height;
	}

	// expiration, and interpolator updates
	override void DoEffect()
	{
		Super.DoEffect();
		// cap lifespan if owner is dead
		if ( Owner.Health <= 0 ) lifespan = min(lifespan,35);
		else lvheight = Owner.Height;
		if ( cummflash > 0 ) cummflash--;
		if ( cummspan > 0 )
		{
			cummspan--;
			if ( cummspan <= 0 ) cummdamage = 0;
		}
		if ( Owner.Health > lasthealth )
		{
			for ( int i=9; i>0; i-- )
				laghealth[i] = Owner.Health;
		}
		laghealth[0] = lasthealth = Owner.Health;
		intp.Update(lasthealth);
		intpl.Update(laghealth[9]);
		for ( int i=9; i>0; i-- )
			laghealth[i] = laghealth[i-1];
		if ( fadein < 5 ) fadein++;
		lifespan--;
		if ( lifespan <= 0 ) Destroy();
	}

	override void PreTravelled()
	{
		// expire immediately when switching maps
		Destroy();
	}

	default
	{
		+INVENTORY.UNTOSSABLE;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNCLEARABLE;
	}
}

// fractic-compatible interpolators, with double value
Class SmoothLinearValueInterpolator
{
	private double val, oldval, diff;

	static SmoothLinearValueInterpolator Create( double val, double diff )
	{
		let v = new("SmoothLinearValueInterpolator");
		v.oldval = v.val = val;
		v.diff = diff;
		return v;
	}
	void Reset( double newval )
	{
		oldval = val = newval;
	}
	void Update( double newval )
	{
		oldval = val;
		if ( abs(newval-val) < diff ) val = newval;
		else if ( val > newval ) val = max(newval,val-diff);
		else val = min(newval,val+diff);
	}
	double GetValue( double fractic = 1. )
	{
		return val*fractic+oldval*(1.-fractic);
	}
}
Class SmoothDynamicValueInterpolator
{
	private double val, oldval, factor, mindiff, maxdiff;

	static SmoothDynamicValueInterpolator Create( double val, double factor, double mindiff, double maxdiff )
	{
		let v = new("SmoothDynamicValueInterpolator");
		v.oldval = v.val = val;
		v.factor = factor;
		v.mindiff = mindiff;
		v.maxdiff = maxdiff;
		return v;
	}
	void Reset( double newval )
	{
		oldval = val = newval;
	}
	void Update( double newval )
	{
		oldval = val;
		if ( abs(newval-val) < mindiff ) val = newval;
		else
		{
			double diff = min(abs(newval-val)*factor,maxdiff);
			if ( val > newval ) val = max(newval,val-diff);
			else val = min(newval,val+diff);
		}
	}
	double GetValue( double fractic = 1. )
	{
		return val*fractic+oldval*(1.-fractic);
	}
}
