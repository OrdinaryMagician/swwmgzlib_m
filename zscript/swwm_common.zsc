// common code goes here

// extra sound channels for the mod
enum ESWWMGZChannels
{
	CHAN_YOUDONEFUCKEDUP = 63200,	// exception handler
	CHAN_VOICEOVER = 63201,		// voice acting
	CHAN_FOOTSTEP = 63202,		// footstep sounds and others
	CHAN_WEAPONEXTRA = 63203,	// additional weapon sounds (usually loops)
	CHAN_POWERUP = 63204,		// powerup sounds
	CHAN_POWERUPEXTRA = 63205,	// additional powerup sounds
	CHAN_PLAYEREXTRA = 63206,	// additional player sounds (usually loops)
	CHAN_ITEMEXTRA = 63207,		// additional item sounds
	CHAN_WEAPONEXTRA2 = 63208,	// additional weapon sound slot
	CHAN_WEAPONEXTRA3 = 63209,	// additional weapon sound slot (again)
	CHAN_DAMAGE = 63210,		// used for impact/hit sounds
	CHAN_AMBEXTRA = 63211,		// player ambience when submerged
	CHAN_VOICEOVERAUX = 63212,	// extra channel to make oneliner voices louder
	CHAN_VOICEOVERAUX2 = 63213,	// how many more channels do I need???
	CHAN_VOICEOVERAUX3 = 63214	// oh god, the loudening
};

const FallbackTag = "AWESOME IT'S PENIS"; // used on tag processing, please don't mind the actual string used)
const MaxBouncePerTic = 40;	// maximum simultaneous bounces in one tic for a lightweight actor before we consider it's stuck

// basic "does nothing" actor, used to remove stuff in CheckReplacement
Class SWWMNothing : Actor
{
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

// used for minimap stuff
Class SWWMExitMarker : MapMarker
{
	Default
	{
		Scale 2.;
		Args 0, 0, 1;
	}
	States
	{
	Spawn:
		EIXT ABCD -1;
		Stop;
	}
}
Class SWWMKeyMarker : MapMarker
{
	Default
	{
		Args 0, 0, 1;
		+DORMANT;
	}
	override void PostBeginPlay()
	{
		if ( target is 'SWWMKey' )
		{
			Class<Key> k = SWWMKey(target).species;
			if ( k )
			{
				let def = GetDefaultByType(k);
				picnum = def.SpawnState.GetSpriteTexture(0);
			}
		}
		else picnum = target.SpawnState.GetSpriteTexture(0);
		Scale = target.Scale;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target )
		{
			Destroy();
			return;
		}
		bDORMANT = ((!level.allmap)||Inventory(target).Owner);
		if ( pos != target.pos ) SetOrigin(target.pos,true);
	}
}
