// Static handler responsible for some special stuff

// save version holder
Class SWWMSaveVerData : Thinker
{
	String ver, modver;
}

Class SWWMStaticHandler : StaticEventHandler
{
	// crash handler
	ui bool wasinmap;
	ui int timer, msgpick;
	// broccoli doccoli
	bool isbd;
	String bdname;
	// versioning
	bool tainted;
	String taintver, taintmodver;
	int checktic;
	ui bool checked;
	int maptime;
	bool unloading;
	// title stuff
	bool titlefirst;

	override void NewGame()
	{
		// set save version every new session
		let svd = new("SWWMSaveVerData");
		svd.ChangeStatNum(Thinker.STAT_STATIC);
		svd.ver = StringTable.Localize("$SWWM_SHORTVER");
		svd.modver = StringTable.Localize("$"..SWWMMODPREFIX.."_SHORTVER");
	}

	override void WorldUnloaded( WorldEvent e )
	{
		SWWMHandler.ClearAllShaders(players[consoleplayer]);
		unloading = true;
	}

	override void WorldTick()
	{
		maptime++;
		if ( !isbd ) return;
		for ( int i=0; i<MAXPLAYERS; i++ ) if ( playeringame[i] ) players[i].cheats |= CF_TOTALLYFROZEN;
	}

	override void WorldLoaded( WorldEvent e )
	{
		if ( gamestate != GS_TITLELEVEL ) titlefirst = true;	// we skip it
		unloading = false;
		maptime = 0;
		if ( e.IsSavegame || e.IsReopen )
		{
			// restore underwater sounds for players
			for ( int i=0; i<MAXPLAYERS; i++ )
			{
				if ( !playeringame[i] || !(players[i].mo is 'SWWMPlayer') ) continue;
				SWWMPlayer(players[i].mo).CheckUnderwaterAmb(true);
			}
		}
		SWWMHandler.ClearAllShaders(players[consoleplayer]);
		if ( !e.IsSaveGame ) return;
		// save version checker
		checktic = gametic+5;
		let ti = ThinkerIterator.Create("SWWMSaveVerData",Thinker.STAT_STATIC);
		let svd = SWWMSaveVerData(ti.Next());
		if ( !svd )
		{
			tainted = true;
			taintver = "\cg(no version info)\c-";
			taintmodver = "\cg(no version info)\c-";
			return;
		}
		String cver = StringTable.Localize("$SWWM_SHORTVER");
		String cmodver = StringTable.Localize("$"..SWWMMODPREFIX.."_SHORTVER");
		if ( (svd.ver != cver) || (svd.modver != cmodver) )
		{
			tainted = true;
			taintver = svd.ver;
			taintmodver = svd.modver;
		}
	}

	override void OnRegister()
	{
		// warning for unsupported
		if ( Wads.FindLump("swwmgamesupported.txt") != -1 ) return;
		Console.Printf(
			"\cx┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\c-\n"
			"\cx┃                     \cr[\cgWARNING\cr]                     \cx┃\c-\n"
			"\cx┃  \cjThe mod is \cfNOT\cj compatible with the loaded IWAD.  \cx┃\c-\n"
			"\cx┃            \cjIssues \cfCAN\cj and \cfWILL\cj happen.            \cx┃\c-\n"
			"\cx┃               \cr[\cgYOU ARE ON YOUR OWN\cr]               \cx┃\c-\n"
			"\cx┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\c-");
		S_StartSound("compat/warn",CHAN_YOUDONEFUCKEDUP,CHANF_UI|CHANF_NOPAUSE|CHANF_OVERLAP,1,ATTN_NONE);
	}

	override void RenderOverlay( RenderEvent e )
	{
		// warn on use of incorrect render settings
		// make sure to find the cvars, rather than use them directly
		// just in case anything changes in the future and we end up
		// breaking shit (not the first time a mod does that)
		int yy = 8;
		let backend = CVar.FindCVar('vid_preferbackend');
		let rmode = CVar.FindCVar('vid_rendermode');
		if ( backend && (backend.GetInt() > 1) )
		{
			String str = "UNSUPPORTED VIDEO BACKEND - PLEASE SWITCH TO OPENGL OR VULKAN";
			Screen.DrawText(newsmallfont,Font.CR_RED,(Screen.GetWidth()-newsmallfont.StringWidth(str)*CleanXFac_1)/2,yy,str,DTA_CleanNoMove_1,true);
			yy += 16*CleanYFac_1;
		}
		if ( rmode && (rmode.GetInt() != 4) )
		{
			String str = "UNSUPPORTED RENDER MODE - PLEASE SWITCH TO HARDWARE RENDERING";
			Screen.DrawText(newsmallfont,Font.CR_RED,(Screen.GetWidth()-newsmallfont.StringWidth(str)*CleanXFac_1)/2,yy,str,DTA_CleanNoMove_1,true);
		}
	}

	override void ConsoleProcess( ConsoleEvent e )
	{
		if ( e.Name ~== "swwmresetcvars" )
		{
			Array<String> cvarlist;
			SWWMUtility.GetCVars(cvarlist);
			for ( int i=0; i<cvarlist.Size(); i++ )
			{
				// don't reset this one
				if ( cvarlist[i] == SWWMMODPREFIX.."_playtime" )
					continue;
				CVar.FindCVar(cvarlist[i]).ResetToDefault();
			}
		}
		else if ( e.Name ~== "swwmresettooltips" )
		{
			CVar.FindCVar(SWWMMODPREFIX.."_tooltipshown").ResetToDefault();
			CVar.FindCVar(SWWMMODPREFIX.."_tooltipnote").ResetToDefault();
		}
		else if ( e.Name ~== "swwmlistcvars" )
		{
			// debug
			Array<String> cvarlist;
			SWWMUtility.GetCVars(cvarlist);
			for ( int i=0; i<cvarlist.Size(); i++ )
			{
				let cv = CVar.FindCVar(cvarlist[i]);
				Console.Printf(cvarlist[i].." = "..cv.GetString());
			}
		}
		else if ( e.Name ~== "swwmgetplaytime" )
		{
			int val = CVar.FindCVar(SWWMMODPREFIX.."_playtime").GetInt();
			int sec = (val%60);
			int min = ((val/60)%60);
			int hour = ((val/3600)%24);
			int day = val/86400;
			String str = "";
			if ( day ) str.AppendFormat("%d days",day);
			if ( hour )
			{
				if ( str != "" ) str = str..", ";
				str.AppendFormat("%d hours",hour);
			}
			if ( min )
			{
				if ( str != "" ) str = str..", ";
				str.AppendFormat("%d minutes",min);
			}
			if ( sec )
			{
				if ( str != "" ) str = str..", ";
				str.AppendFormat("%d seconds",sec);
			}
			if ( str == "" ) Console.Printf("No Data");
			else Console.Printf(str);
		}
		else if ( e.Name ~== "swwmgetversion" )
		{
			let ti = ThinkerIterator.Create("SWWMSaveVerData",Thinker.STAT_STATIC);
			let svd = SWWMSaveVerData(ti.Next());
			if ( svd ) Console.Printf("\cjLibrary: %s\c-\n\cjMod: %s\c-",svd.ver,svd.modver);
			else Console.Printf("\cg(no version data)\c-");
			if ( tainted ) Console.Printf("\cgversion mismatched\c-");
			else Console.Printf("\cdversion not mismatched\c-");
		}
	}

	override void PostUiTick()
	{
		if ( (gametic > 0) && !(gametic%GameTicRate) )
		{
			let pt = CVar.FindCVar(SWWMMODPREFIX.."_playtime");
			int ct = pt.GetInt();
			pt.SetInt(ct+1);
		}
		if ( gamestate != GS_LEVEL ) return;
		if ( checked || (gametic < checktic) ) return;
		checked = true;
		String cver = StringTable.Localize("$SWWM_SHORTVER");
		String cmodver = StringTable.Localize("$"..SWWMMODPREFIX.."_SHORTVER");
		if ( tainted )
		{
			let ti = ThinkerIterator.Create("SWWMSaveVerData",Thinker.STAT_STATIC);
			let svd = SWWMSaveVerData(ti.Next());
			if ( !svd ) Console.Printf("\cgWARNING:\n \cjSave contains no version data. Issues may happen.\c-");
			else
			{
				Console.Printf("\cgWARNING:\n \cjVersion mismatch with save data. Issues may happen.\c-");
				Console.Printf("\cgSaved:\n \cjLibrary: "..svd.ver.."\c-\n \cjMod: "..svd.modver.."\c-");
				Console.Printf("\cgCurrent:\n \cjLibrary: "..cver.."\c-\n \cjMod: "..cmodver.."\c-");
			}
		}
	}

	override void UiTick()
	{
		// Fancy crash effect
		if ( (gamestate == GS_LEVEL) || (gamestate == GS_TITLELEVEL) )
		{
			wasinmap = true;
			timer = 0;
		}
		else if ( (gamestate == GS_FULLCONSOLE) && ((wasinmap && !players[consoleplayer].viewheight) || (timer > 0)) )
		{
			wasinmap = false;
			if ( timer == 1 )
			{
				msgpick = Random[UIStuff](1,8);
				Console.Printf("\cf%s\c-",StringTable.Localize("$CRASHMSG"..msgpick.."A"));
				if ( isbd )
				{
					S_StartSound("crash/glass",CHAN_YOUDONEFUCKEDUP,CHANF_UI|CHANF_NOPAUSE|CHANF_OVERLAP,1,ATTN_NONE);
					S_StartSound("crash/glass",CHAN_YOUDONEFUCKEDUP,CHANF_UI|CHANF_NOPAUSE|CHANF_OVERLAP,1,ATTN_NONE);
				}
				else S_StartSound("crash/crash",CHAN_YOUDONEFUCKEDUP,CHANF_UI|CHANF_NOPAUSE|CHANF_OVERLAP,1,ATTN_NONE);
			}
			else if ( timer == 70 )
			{
				Console.Printf("\cf%s\c-",StringTable.Localize("$CRASHMSG"..msgpick.."B"));
				S_StartSound("crash/curb",CHAN_YOUDONEFUCKEDUP,CHANF_UI|CHANF_NOPAUSE|CHANF_OVERLAP,1,ATTN_NONE);
			}
			else if ( timer == 140 )
			{
				if ( isbd ) Console.Printf("\cfYou shouldn't have tried running this with "..bdname..".\c-");
				else Console.Printf("\cfYou should probably screenshot this error and show it to Marisa.\c-");
				Console.Printf("\cfLoaded Version:\n \cjLibrary: %s\c-\n \cjMod: %s\c-",StringTable.Localize("$SWWM_SHORTVER"),StringTable.Localize("$"..SWWMMODPREFIX.."_SHORTVER"));
				if ( tainted ) Console.Printf("\cfSavegame Version:\n \cjLibrary: %s\c-\n \cjMod: %s\c-",taintver,taintmodver);
			}
			timer++;
		}
	}
}

