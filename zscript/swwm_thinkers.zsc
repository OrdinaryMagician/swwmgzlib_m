// various utility thinkers

Class SWWMStaticThinker : Thinker abstract
{
	// shell class to iterate easier on sanity checks
	// all subclasses should be guaranteed to have a statnum of STAT_STATIC
	// if they don't, something is very wrong
}

// Korax instakill handler
Class UglyBoyGetsFuckedUp : Thinker
{
	bool wedone;

	override void Tick()
	{
		if ( wedone ) return;
		if ( level.killed_monsters < level.total_monsters )
		{
			// stop portal door
			int sidx = level.CreateSectorTagIterator(145).Next();
			if ( sidx == -1 ) return;
			Sector door = level.Sectors[sidx];
			let ti = ThinkerIterator.Create("SectorEffect");
			SectorEffect se;
			while ( se = SectorEffect(ti.Next()) )
			{
				if ( se.GetSector() != door ) continue;
				se.Destroy();
				door.StopSoundSequence(CHAN_VOICE);
			}
			return;
		}
		wedone = true;
		level.ExecuteSpecial(Door_Open,null,null,false,145,8);
		Destroy();
	}
}

// cache data for manual lockdefs parsing nonsense
Class LIEntry
{
	int locknumber;
	bool hascolor;
	Color mapcolor;
}

Class SWWMCachedLockInfo : SWWMStaticThinker
{
	Array<LIEntry> ent;

	static clearscope bool IsValidLock( int l )
	{
		let ti = ThinkerIterator.Create("SWWMCachedLockInfo",STAT_STATIC);
		SWWMCachedLockInfo cli = SWWMCachedLockInfo(ti.Next());
		if ( !cli ) return false;
		for ( int i=0; i<cli.ent.Size(); i++ )
		{
			if ( cli.ent[i].locknumber == l )
				return true;
		}
		return false;
	}

	static clearscope Color GetLockColor( int l )
	{
		let ti = ThinkerIterator.Create("SWWMCachedLockInfo",STAT_STATIC);
		SWWMCachedLockInfo cli = SWWMCachedLockInfo(ti.Next());
		if ( !cli ) return 0;
		for ( int i=0; i<cli.ent.Size(); i++ )
		{
			if ( (cli.ent[i].locknumber == l) && cli.ent[i].hascolor )
				return cli.ent[i].mapcolor;
		}
		return 0;
	}

	static SWWMCachedLockInfo GetInstance()
	{
		let ti = ThinkerIterator.Create("SWWMCachedLockInfo",STAT_STATIC);
		SWWMCachedLockInfo cli = SWWMCachedLockInfo(ti.Next());
		if ( cli ) return cli;
		cli = new("SWWMCachedLockInfo");
		cli.ChangeStatNum(STAT_STATIC);
		return cli;
	}
}

