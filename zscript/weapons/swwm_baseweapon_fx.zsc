// Base casing classes

Class SWWMCasing : Actor abstract
{
	SWWMCasing prevcasing, nextcasing;
	bool killme;
	int numbounces;
	double pitchvel, anglevel;
	double heat;

	Default
	{
		Radius 2;
		Height 4;
		+NOBLOCKMAP;
		+MISSILE;
		+DROPOFF;
		+MOVEWITHSECTOR;
		+THRUACTORS;
		+USEBOUNCESTATE;
		+INTERPOLATEANGLES;
		+NOTELEPORT;
		+ROLLSPRITE;
		+ROLLCENTER;
		Mass 1;
		Gravity 0.35;
		BounceType "Hexen";
		WallBounceFactor 0.65;
		BounceFactor 0.65;
		FloatBobPhase 0;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		pitchvel = FRandom[Junk](10,30)*RandomPick[Junk](-1,1);
		anglevel = FRandom[Junk](10,30)*RandomPick[Junk](-1,1);
		heat = 1.0;
		SWWMHandler.QueueCasing(self);
	}
	override void OnDestroy()
	{
		SWWMHandler.DeQueueCasing(self);
		Super.OnDestroy();
	}
	override void Tick()
	{
		Super.Tick();
		if ( isFrozen() ) return;
		if ( killme ) A_FadeOut(.01);
		if ( waterlevel > 0 )
		{
			vel.xy *= .98;
			anglevel *= .98;
			pitchvel *= .98;
		}
		if ( heat <= 0 ) return;
		let s = Spawn("SWWMSmallSmoke",pos);
		s.alpha *= heat;
		heat -= 0.05;
	}
	States
	{
	Spawn:
		XZW1 A 1
		{
			angle += anglevel;
			pitch += pitchvel;
		}
		Loop;
	Bounce:
		XZW1 A 0
		{
			pitchvel = FRandom[Junk](10,30)*RandomPick[Junk](-1,1);
			anglevel = FRandom[Junk](10,30)*RandomPick[Junk](-1,1);
			vel = (vel.unit()+(FRandom[Junk](-.2,.2),FRandom[Junk](-.2,.2),FRandom[Junk](-.2,.2))).unit()*vel.length();
			if ( numbounces && ((numbounces > 3) || (Random[Junk](1,20) < 17) || (vel.z > -1.4)) )
			{
				ClearBounce();
				ExplodeMissile();
			}
			numbounces++;
		}
		Goto Spawn;
	Death:
		XZW1 B -1
		{
			pitch = roll = 0;
			angle = FRandom[Junk](0,360);
		}
		Stop;
	}
}

Class SWWMBulletImpact : Actor
{
	Default
	{
		RenderStyle "Add";
		Radius 0.1;
		Height 0;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+DONTSPLASH;
		+NOTELEPORT;
		+NOINTERACTION;
		Scale 0.25;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_SprayDecal("Pock",-20);
		int numpt = int(Random[Junk](5,10)*scale.x*4);
		Vector3 x = (cos(angle)*cos(pitch),sin(angle)*cos(pitch),-sin(pitch));
		for ( int i=0; i<numpt; i++ )
		{
			Vector3 pvel = (x+(FRandom[Junk](-.8,.8),FRandom[Junk](-.8,.8),FRandom[Junk](-.8,.8))).unit()*FRandom[Junk](0.1,1.2);
			let s = Spawn("SWWMSmoke",pos+x*2);
			s.vel = pvel;
			s.SetShade(Color(1,1,1)*Random[Junk](128,192));
		}
		numpt = int(Random[Junk](3,8)*scale.x*4);
		for ( int i=0; i<numpt; i++ )
		{
			Vector3 pvel = (FRandom[Junk](-1,1),FRandom[Junk](-1,1),FRandom[Junk](-1,1)).unit()*FRandom[Junk](2,8);
			let s = Spawn("SWWMSpark",pos+x*2);
			s.vel = pvel;
		}
		numpt = int(Random[Junk](2,5)*scale.x*4);
		for ( int i=0; i<numpt; i++ )
		{
			Vector3 pvel = (FRandom[Junk](-1,1),FRandom[Junk](-1,1),FRandom[Junk](-1,1)).unit()*FRandom[Junk](2,8);
			let s = Spawn("SWWMChip",pos+x*2);
			s.vel = pvel;
		}
		if ( !Random[Junk](0,3) ) A_StartSound("bullet/ricochet",CHAN_VOICE,attenuation:2.5);
		else A_StartSound("bullet/hit",CHAN_VOICE,attenuation:3.0);
		Spawn("InvisibleSplasher",pos);
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

Class SWWMWeaponLight : DynamicLight
{
	int cnt;
	Default
	{
		DynamicLight.Type "Point";
		args 255,224,64,150;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target )
		{
			Destroy();
			return;
		}
		if ( target.player )
		{
			Vector3 x, y, z, origin;
			[x, y, z] = swwm_CoordUtil.GetAxes(target.pitch+target.viewpitch,target.angle+target.viewangle,target.roll+target.viewroll);
			origin = level.Vec3Offset(target.Vec2OffsetZ(0,0,target.player.viewz),x*12);
			SetOrigin(origin,true);
		}
		else SetOrigin(target.pos,true);
		if ( cnt++ > 2 ) Destroy();
	}
}

Class PunchImpact : Actor
{
	Default
	{
		Radius 0.1;
		Height 0;
		+NOGRAVITY;
		+NOCLIP;
		+NOTELEPORT;
		+NOINTERACTION;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_QuakeEx(2,2,2,12,0,200,"",QF_RELATIVE|QF_SCALEDOWN|QF_3D,falloff:100,rollIntensity:.3);
		A_StartSound("melee/hit",CHAN_VOICE,CHANF_DEFAULT,bAMBUSH?.6:1.);
		A_SprayDecal("WallCrack",-20);
		int numpt = Random[Ponch](5,10);
		if ( bAMBUSH ) numpt /= 3;
		Vector3 x = (cos(angle)*cos(pitch),sin(angle)*cos(pitch),-sin(pitch));
		for ( int i=0; i<numpt; i++ )
		{
			Vector3 pvel = (x+(FRandom[Ponch](-.8,.8),FRandom[Ponch](-.8,.8),FRandom[Ponch](-.8,.8))).unit()*FRandom[Ponch](.1,1.2);
			let s = Spawn("SWWMSmoke",pos);
			s.vel = pvel;
			s.SetShade(Color(1,1,1)*Random[Ponch](128,192));
		}
		numpt = Random[Ponch](4,12);
		if ( bAMBUSH ) numpt /= 3;
		for ( int i=0; i<numpt; i++ )
		{
			Vector3 pvel = (FRandom[Ponch](-1,1),FRandom[Ponch](-1,1),FRandom[Ponch](-1,1)).unit()*FRandom[Ponch](2,8);
			let s = Spawn("SWWMSpark",pos);
			s.vel = pvel;
		}
		numpt = Random[Ponch](4,8);
		if ( bAMBUSH ) numpt /= 3;
		for ( int i=0; i<numpt; i++ )
		{
			Vector3 pvel = (FRandom[Ponch](-1,1),FRandom[Ponch](-1,1),FRandom[Ponch](-1,1)).unit()*FRandom[Ponch](2,8);
			let s = Spawn("SWWMChip",pos);
			s.vel = pvel;
		}
		Destroy();
	}
}
