// Handler responsible for item replacements and whatever else
// most of the code is split up to make it easier to navigate
// (remember to extend the class in projects using this)

Class SWWMHandler : EventHandler
{
	// used by base items
	transient int lastpickuptic[MAXPLAYERS];

	// stuff to reduce worldthingspawned overhead
	int iwantdie;

	// for checkreplacement
	bool hasdrlamonsters;
	int iskdizd;
	Array<String> bludtypes;

	override void OnRegister()
	{
		// "uninitialize" some vars
		iwantdie = -1;
		// this one can be initialized here easily
		for ( int i=0; i<AllActorClasses.Size(); i++ )
		{
			if ( AllActorClasses[i].GetClassName() != "RLMonster" ) continue;
			hasdrlamonsters = true;
			break;
		}
		if ( LevelInfo.MapExists("Z1M1") && (LevelInfo.MapChecksum("Z1M1") ~== "2B7744234ED2C162AD08A3255E979F65") )
			iskdizd = true;
		// read bludtype files if they can be found
		for ( int lmp = Wads.FindLump("BLUDTYPE"); lmp != -1; lmp = Wads.FindLump("BLUDTYPE",lmp+1) )
		{
			String dat = Wads.ReadLump(lmp);
			Array<String> list;
			// fucking Windows
			dat.Replace("\r","");
			list.Clear();
			dat.Split(list,"\n");
			for ( int i=0; i<list.Size(); i++ )
			{
				if ( (list[i].Length() == 0) || (list[i].Left(2) == "//") || (list[i].Left(1) == "") )
					continue;
				bludtypes.Push(list[i]);
			}
		}
	}

	override void WorldTick()
	{
		QueueMaintenance();
		FlashTick();
		// healthbar on whatever the player is aiming at
		for ( int i=0; i<MAXPLAYERS; i++ )
		{
			if ( !playeringame[i] || (players[i].Health <= 0) || !players[i].mo ) continue;
			let t = players[i].mo.GetPointer(AAPTR_PLAYER_GETTARGET);
			if ( t && t.bSHOOTABLE && (t.Health > 0) ) SWWMQuickCombatTracker.Update(t);
		}
	}

	override void PostUiTick()
	{
		FlashUITick();
	}

	// stuff for hud
	override void RenderUnderlay( RenderEvent e )
	{
		// armor/health flashes
		FlashRender(e);
		// weapon underlays
		if ( players[consoleplayer].ReadyWeapon is 'SWWMWeapon' )
			SWWMWeapon(players[consoleplayer].ReadyWeapon).RenderUnderlay(e);
		if ( !statusbar || !(statusbar is 'SWWMStatusBar') ) return;
		SWWMStatusBar(statusbar).viewpos = e.viewpos;
		SWWMStatusBar(statusbar).viewrot = (e.viewangle,e.viewpitch,e.viewroll);
	}

	// various shaders
	override void RenderOverlay( RenderEvent e )
	{
		RenderShaders(e);
	}
}
