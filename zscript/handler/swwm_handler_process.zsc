// event processing
extend Class SWWMHandler
{
	override void ConsoleProcess( ConsoleEvent e )
	{
		if ( e.Name ~== "swwmzoomin" )
		{
			if ( (gamestate != GS_LEVEL) || (players[consoleplayer].Health <= 0) || !(players[consoleplayer].mo is 'SWWMPlayer') )
				return;
			let bar = SWWMStatusBar(StatusBar);
			if ( !bar ) return;
			bar.mm_zoom = max(.5,bar.mm_zoom-.25);
		}
		else if ( e.Name ~== "swwmzoomout" )
		{
			if ( (gamestate != GS_LEVEL) || (players[consoleplayer].Health <= 0) || !(players[consoleplayer].mo is 'SWWMPlayer') )
				return;
			let bar = SWWMStatusBar(StatusBar);
			if ( !bar ) return;
			bar.mm_zoom = min(1.,bar.mm_zoom+.25);
		}
		else if ( e.Name.Left(16) ~== "swwmtesttooltip." )
		{
			let bar = SWWMStatusBar(StatusBar);
			if ( !bar ) return;
			String wname = e.Name.Mid(16);
			Class<SWWMWeapon> w = wname;
			if ( w )
			{
				if ( GetDefaultByType(w).tooltip == "" )
				{
					Console.Printf("'%s' has no tooltip defined.",wname);
					return;
				}
				let tt = new("SWWMWeaponTooltip").Init(w);
				bool appended = false;
				for ( SWWMWeaponTooltip t=bar.ctip; t; t=t.next )
				{
					if ( t.next ) continue;
					appended = true;
					t.next = tt;
					break;
				}
				if ( !appended )
				{
					bar.ctip = tt;
					bar.AttachMessage(tt,-2910);
				}
			}
			else Console.Printf("'%s' is not a valid SWWM weapon.",wname);
			return;
		}
		else ModConsoleProcess(e);
	}

	override void NetworkProcess( ConsoleEvent e )
	{
		if ( e.Name ~== "swwmcleareffects" )
		{
			int n = casings_cnt+chips_cnt+blods_cnt+meats_cnt;
			CleanQueues();
			Console.Printf("%d effects cleared.",n);
		}
		else ModNetworkProcess(e);
	}

	override bool InputProcess( InputEvent e )
	{
		// F
		if ( (e.Type == InputEvent.TYPE_KeyDown) && (e.KeyChar == 0x66) )
		{
			let demo = SWWMPlayer(players[consoleplayer].mo);
			if ( demo && (demo.Health <= 0) && (demo.deadtimer > 40) )
			{
				// pay respects
				int numf = Random[FInTheChat](1,6);
				for ( int i=0; i<numf; i++ )
				{
					let f = PayRespects.PressF();
					StatusBar.AttachMessage(f,0,layer:StatusBar.HUDMSGLayer_OverHUD);
				}
			}
		}
		return false;
	}

}
