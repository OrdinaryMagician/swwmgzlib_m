// separate Devastation Sigil file, include if used

// hacky way to call our DoHitFX function (hey, as long as it works)
Class AngeryHitFXService : Service
{
	override int GetInt( String request, String stringArg, int intArg, double doubleArg, object objectArg )
	{
		if ( request != "HitFX" ) return 0;
		let mo = PlayerPawn(objectArg);
		let a = AngeryPower(mo.FindInventory("AngeryPower"));
		if ( a ) a.DoHitFX();
		return 0;
	}
}

Class AngeryLight : PointLightAttenuated
{
	Default
	{
		Args 224,0,255,80;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target || !master )
		{
			Destroy();
			return;
		}
		if ( target.player )
			SetOrigin(target.Vec2OffsetZ(0,0,target.player.viewz),true);
		else SetOrigin(target.Vec3Offset(0,0,target.height/2),true);
		args[LIGHT_INTENSITY] = Random[Invinciball](10,12)*8;
		bDORMANT = Powerup(master).isBlinking();
	}
}
Class AngerySnd : Actor
{
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+NOINTERACTION;
	}
	override void Tick()
	{
		if ( !target || !master )
		{
			Destroy();
			return;
		}
		SetOrigin(target.pos,true);
		if ( players[consoleplayer].Camera == target )
		{
			A_SoundVolume(CHAN_VOICE,0.);
			A_SoundVolume(CHAN_7,.5);
		}
		else
		{
			A_SoundVolume(CHAN_VOICE,.4);
			A_SoundVolume(CHAN_7,0.);
		}
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_StartSound("powerup/devastationact",CHAN_VOICE,CHANF_LOOP,.4,1.5);
		A_StartSound("powerup/devastationact",CHAN_7,CHANF_LOOP,.5,ATTN_NONE);
	}
	override void OnDestroy()
	{
		Super.OnDestroy();
		A_StopSound(CHAN_VOICE);
		A_StopSound(CHAN_7);
	}
}
Class AngeryPower : Powerup
{
	Mixin SWWMShadedPowerup;

	Actor l, snd;
	int lasteffect;
	transient int lastpulse;

	Default
	{
		Powerup.Duration -50;
		Inventory.Icon "graphics/HUD/Icons/I_Devastation.png";
		Powerup.Color "C0 00 FF", 0.2;
		+INVENTORY.ADDITIVETIME;
	}

	override void InitEffect()
	{
		Super.InitEffect();
		if ( !Owner ) return;
		SWWMHandler.DoFlash(Owner,Color(64,224,0,255),30);
		Owner.A_QuakeEx(8,8,8,20,0,1,"",QF_RELATIVE|QF_SCALEDOWN,rollIntensity:1.);
		lasteffect = int.min;
		lastpulse = max(lastpulse,gametic+35);
		if ( Owner is 'SWWMPlayer' )
			SWWMPlayer(Owner).lastbump *= .95;
		l = Spawn("AngeryLight",Owner.pos);
		l.target = Owner;
		l.master = self;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if ( !Owner ) return;
		if ( !snd ) snd = Spawn("AngerySnd",Owner.pos);
		snd.target = Owner;
		snd.master = self;
	}

	override void EndEffect()
	{
		Super.EndEffect();
		if ( !Owner ) return;
		Owner.A_StartSound("powerup/devastationend",CHAN_ITEMEXTRA,CHANF_OVERLAP);
		SWWMHandler.DoFlash(Owner,Color(128,224,0,255),30);
		Owner.A_QuakeEx(4,4,4,20,0,1,"",QF_RELATIVE|QF_SCALEDOWN,rollIntensity:1.);
		Owner.A_AlertMonsters(2000);
		if ( Owner is 'SWWMPlayer' )
			SWWMPlayer(Owner).lastbump *= .9;
		if ( (EffectTics <= 0) && Owner && Owner.CheckLocalView() ) Console.Printf(StringTable.Localize("$D_DEVASTATION"));
	}

	void DoHitFX()
	{
		if ( level.maptime <= lasteffect+5 ) return;
		SWWMHandler.DoFlash(Owner,Color(64,224,0,255),10);
		Owner.A_QuakeEx(8,8,8,Random[Rage](3,8),0,1,"",QF_RELATIVE|QF_SCALEDOWN,rollIntensity:1.);
		Owner.A_StartSound("powerup/devastationhit",CHAN_POWERUP,CHANF_OVERLAP);
		lasteffect = level.maptime;
		lastpulse = max(lastpulse,gametic+35);
		if ( Owner is 'SWWMPlayer' )
			SWWMPlayer(Owner).lastbump *= .9;
	}

	override void ModifyDamage( int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags )
	{
		if ( passive || (damage <= 0) ) return;
		// (2^31-1)/25 : guarantee that it caps rather than overflowing
		if ( damage > 85899345 ) newdamage = int.max;
		else newdamage = damage*25;
	}
}
Class AngerySigil : Inventory
{
	Mixin SWWMOverlapPickupSound;
	Mixin SWWMUseToPickup;
	Mixin SWWMRespawn;
	Mixin SWWMPickupGlow;
	Mixin SWWMCountNoPickup;

	override bool Use( bool pickup )
	{
		let r = AngeryPower(Owner.FindInventory("AngeryPower"));
		if ( r )
		{
			r.EffectTics += r.default.EffectTics;
			SWWMHandler.DoFlash(Owner,Color(64,224,0,255),30);
			Owner.A_QuakeEx(8,8,8,20,0,1,"",QF_RELATIVE|QF_SCALEDOWN,rollIntensity:1.);
			if ( Owner is 'SWWMPlayer' )
				SWWMPlayer(Owner).lastbump *= .95;
		}
		else Owner.GiveInventory("AngeryPower",1);
		return true;
	}
	override void PreTravelled()
	{
		if ( tracer ) tracer.Destroy();
	}
	override void Travelled()
	{
		Super.Travelled();
		if ( tracer ) return;
		tracer = Spawn("AngerySigilX",pos);
		tracer.angle = angle;
		tracer.target = self;
		tracer.FloatBobPhase = FloatBobPhase;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		tracer = Spawn("AngerySigilX",pos);
		tracer.angle = angle;
		tracer.target = self;
		tracer.FloatBobPhase = FloatBobPhase;
	}
	Default
	{
		Tag "$T_DEVASTATION";
		Inventory.Icon "graphics/HUD/Icons/I_Devastation.png";
		Inventory.PickupSound "misc/p_pkup_vip";
		Inventory.UseSound "powerup/devastation";
		Inventory.PickupMessage "$T_DEVASTATION";
		Inventory.MaxAmount SWWMMAXVIPAMOUNT;
		Inventory.InterHubAmount SWWMMAXVIPAMOUNT;
		Inventory.PickupFlash "SWWMPurplePickupFlash";
		+INVENTORY.INVBAR;
		+COUNTITEM;
		+INVENTORY.BIGPOWERUP;
		+FLOATBOB;
		FloatBobStrength 0.25;
		Radius 8;
		Height 28;
	}
	States
	{
	Spawn:
		XZW1 A -1;
		Stop;
	}
}
Class AngerySigilX : SWWMItemOverlay
{
	Default
	{
		Scale .5;
		Alpha .35;
		RenderStyle "Subtract";
		+FORCEXYBILLBOARD;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_StartSound("powerup/devastationamb",CHAN_VOICE,CHANF_LOOP,attenuation:2.);
	}
	override void Tick()
	{
		if ( !target )
		{
			Destroy();
			return;
		}
		prev = target.prev+(0,0,20);
		vel = target.vel;
		if ( (target.pos != pos+(0,0,20)) || (target.vel != (0,0,0)) ) SetOrigin(target.pos+(0,0,20)+vel,true);
		if ( angle != target.angle ) A_SetAngle(target.angle,SPF_INTERPOLATE);
		FloatBobPhase = target.FloatBobPhase;
		if ( !bsprite ) bsprite = GetSpriteIndex('XZW1');
		bInvisible = target.bInvisible||(target.sprite!=bsprite);
		SetState(SpawnState+bInvisible);
		A_SoundVolume(CHAN_VOICE,bInvisible?0.:1.);
	}
	States
	{
	Spawn:
		BLPS C -1 Bright;
		TNT1 A -1;
		Stop;
	}
}
