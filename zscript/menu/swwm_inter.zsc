// shared intermission stat screen code
Class SWWMStatScreen : StatusScreen abstract
{
	TextureID gradtex;
	int glarestr;
	int sndcnt;
	int whichtip;
	int tipalphastate;
	double tipalpha;
	String tipstr;
	transient BrokenLines tipl;
	Font mSmallFont, mBigFont, mTinyFont;
	double FracTic;	// for smooth animations
	bool bNoDrawNextLoc;

	// customizable colors
	int lnamecolor, lauthcolor;	// name / author text
	int lsubcolor;			// finished / entering text
	int statbasecolor, statcolor0,	// stat label / color for numbers
		statcolor1, statcolor2;	// color for 100% / color for SUCKS
	int tipcolor0, tipcolor1;	// tip header / tip text
	Color glarecolor;	// for the eye glare when advancing
	int tipflash;	// for switching

	override void Start( wbstartstruct wbstartstruct )
	{
		Super.Start(wbstartstruct);
		mSmallFont = Font.GetFont('TewiFont');
		mBigFont = Font.GetFont('TewiFontOutline');
		mTinyFont = Font.GetFont('MiniwiFont');
		// support for old author text style
		int iof = lnametexts[0].IndexOf(" - by: ");
		if ( iof != -1 )
		{
			authortexts[0] = lnametexts[0].Mid(iof+7);
			lnametexts[0].Truncate(iof);
		}
		iof = lnametexts[1].IndexOf(" - by: ");
		if ( iof != -1 )
		{
			authortexts[1] = lnametexts[1].Mid(iof+7);
			lnametexts[1].Truncate(iof);
		}
		tipalpha = -1.;
		// sane defaults
		lnamecolor = Font.CR_WHITE;
		lauthcolor = Font.CR_DARKGRAY;
		lsubcolor = Font.CR_GOLD;
		statbasecolor = Font.CR_GOLD;
		statcolor0 = Font.CR_DARKGRAY;
		statcolor1 = Font.CR_WHITE;
		statcolor2 = Font.CR_RED;
		tipcolor0 = Font.CR_GOLD;
		tipcolor1 = Font.CR_WHITE;
		glarecolor = "Red";
	}

	// implement in subclass
	abstract protected void DrawSWWMBg();
	abstract protected String StatCnt( int a, int b );
	abstract protected String TimeStr( int secs );

	protected int GetPct( int a, int b )
	{
		if ( a < 0 ) return 0;
		if ( b <= 0 ) return 100;	// for "missed" percentage
		return (a*100)/b;
	}

	override int DrawLF()
	{
		if ( sp_state < 1 ) return 0;
		double GameSecs = (bcnt+FracTic)/double(GameTicRate);
		int th = (mSmallFont.GetHeight()*(8+(!!wbs.partime)+(wbs.totaltime!=Plrs[me].stime))+32)*CleanYFac_1; // height of the stats box + margin
		int bh = ((authortexts[0]!="")?(mTinyFont.GetHeight()+mSmallFont.GetHeight()*2+mBigFont.GetHeight()*2):(mSmallFont.GetHeight()*2+mBigFont.GetHeight()*2))*CleanYFac_1; // height of the "level finished" box
		double xx = Screen.GetWidth()/2-120*CleanXFac_1;
		double yy = (Screen.GetHeight()-th)/2;
		yy -= bh;
		if ( !gradtex ) gradtex = TexMan.CheckForTexture("graphics/title_grad.png",TexMan.Type_Any);
		Screen.DrawTexture(gradtex,false,xx,yy+bh/2,DTA_DestWidth,150*CleanXFac_1,DTA_DestHeight,bh+4*CleanYFac_1,DTA_Rotate,90,DTA_LegacyRenderStyle,STYLE_Shaded,DTA_FillColor,Color(0,0,0),DTA_Alpha,.5,DTA_TopOffset,256,DTA_LeftOffset,128);
		Screen.DrawTexture(gradtex,false,xx,yy+bh/2,DTA_DestWidth,150*CleanXFac_1,DTA_DestHeight,bh+4*CleanYFac_1,DTA_Rotate,270,DTA_LegacyRenderStyle,STYLE_Shaded,DTA_FillColor,Color(0,0,0),DTA_Alpha,.5,DTA_TopOffset,256,DTA_LeftOffset,128);
		Screen.DrawText(mSmallFont,lnamecolor,xx-mSmallFont.StringWidth(lnametexts[0])*CleanXFac_1,yy,lnametexts[0],DTA_ScaleX,CleanXFac_1*2,DTA_ScaleY,CleanYFac_1*2);
		yy += mSmallFont.GetHeight()*2*CleanYFac_1;
		if ( authortexts[0] != "" )
		{
			Screen.DrawText(mTinyFont,lauthcolor,xx-mTinyFont.StringWidth(authortexts[0])*CleanXFac_1/2,yy,authortexts[0],DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
			yy += mTinyFont.GetHeight()*CleanYFac_1;
		}
		String str = StringTable.Localize("$"..SWWMMODPREFIX.."_INTERDONE");
		Screen.DrawText(mBigFont,lsubcolor,xx-mBigFont.StringWidth(str)*CleanXFac_1,yy,str,DTA_ScaleX,CleanXFac_1*2,DTA_ScaleY,CleanYFac_1*2);
		if ( (glarestr > 0) && (sp_state < 2) )
		{
			double alf = clamp((glarestr-FracTic)/20.,0.,1.)**2;
			Screen.DrawText(mBigFont,Font.FindFontColor('MiniFlash'),xx-mBigFont.StringWidth(str)*CleanXFac_1,yy,str,DTA_ScaleX,CleanXFac_1*2,DTA_ScaleY,CleanYFac_1*2,DTA_LegacyRenderStyle,STYLE_Add,DTA_Alpha,alf);
		}
		return 0;
	}

	override void DrawEL()
	{
		int th = (mSmallFont.GetHeight()*(8+(!!wbs.partime)+(wbs.totaltime!=Plrs[me].stime))+32)*CleanYFac_1; // height of the stats box + margin
		int bh = ((authortexts[1]!="")?(mTinyFont.GetHeight()+mSmallFont.GetHeight()*2+mBigFont.GetHeight()*2):(mSmallFont.GetHeight()*2+mBigFont.GetHeight()*2))*CleanYFac_1; // height of the "level finished" box
		double xx = Screen.GetWidth()/2-120*CleanXFac_1;
		double yy = (Screen.GetHeight()+th)/2;
		if ( !gradtex ) gradtex = TexMan.CheckForTexture("graphics/title_grad.png",TexMan.Type_Any);
		Screen.DrawTexture(gradtex,false,xx,yy+bh/2,DTA_DestWidth,150*CleanXFac_1,DTA_DestHeight,bh+4*CleanYFac_1,DTA_Rotate,90,DTA_LegacyRenderStyle,STYLE_Shaded,DTA_FillColor,Color(0,0,0),DTA_Alpha,.5,DTA_TopOffset,256,DTA_LeftOffset,128);
		Screen.DrawTexture(gradtex,false,xx,yy+bh/2,DTA_DestWidth,150*CleanXFac_1,DTA_DestHeight,bh+4*CleanYFac_1,DTA_Rotate,270,DTA_LegacyRenderStyle,STYLE_Shaded,DTA_FillColor,Color(0,0,0),DTA_Alpha,.5,DTA_TopOffset,256,DTA_LeftOffset,128);
		String str = StringTable.Localize("$"..SWWMMODPREFIX.."_INTERNEXT");
		Screen.DrawText(mBigFont,lsubcolor,xx-mBigFont.StringWidth(str)*CleanXFac_1,yy,str,DTA_ScaleX,CleanXFac_1*2,DTA_ScaleY,CleanYFac_1*2);
		if ( (glarestr > 0) && (sp_state >= 10) )
		{
			double alf = clamp((glarestr-FracTic)/20.,0.,1.)**2;
			Screen.DrawText(mBigFont,Font.FindFontColor('MiniFlash'),xx-mBigFont.StringWidth(str)*CleanXFac_1,yy,str,DTA_ScaleX,CleanXFac_1*2,DTA_ScaleY,CleanYFac_1*2,DTA_LegacyRenderStyle,STYLE_Add,DTA_Alpha,alf);
		}
		yy += mBigFont.GetHeight()*2*CleanYFac_1;
		Screen.DrawText(mSmallFont,lnamecolor,xx-mSmallFont.StringWidth(lnametexts[1])*CleanXFac_1,yy,lnametexts[1],DTA_ScaleX,CleanXFac_1*2,DTA_ScaleY,CleanXFac_1*2);
		yy += mSmallFont.GetHeight()*2*CleanYFac_1;
		if ( authortexts[0] == "" ) return;
		Screen.DrawText(mTinyFont,lauthcolor,xx-mTinyFont.StringWidth(authortexts[1])*CleanXFac_1/2,yy,authortexts[1],DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
	}

	override void drawStats( void )
	{
		if ( sp_state < 2 ) return;
		int ne = (sp_state>=8)?(8+(!!wbs.partime)+(wbs.totaltime!=Plrs[me].stime)):(sp_state>=6)?6:(sp_state>=4)?4:2;
		int th = (mSmallFont.GetHeight()*ne)*CleanYFac_1; // height of the stats box
		double xx = Screen.GetWidth()/2-120*CleanXFac_1;
		double yy = (Screen.GetHeight()-th)/2;
		if ( !gradtex ) gradtex = TexMan.CheckForTexture("graphics/title_grad.png",TexMan.Type_Any);
		Screen.DrawTexture(gradtex,false,xx,yy+th/2,DTA_DestWidth,150*CleanXFac_1,DTA_DestHeight,th+4*CleanYFac_1,DTA_Rotate,90,DTA_LegacyRenderStyle,STYLE_Shaded,DTA_FillColor,Color(0,0,0),DTA_Alpha,.5,DTA_TopOffset,256,DTA_LeftOffset,128);
		Screen.DrawTexture(gradtex,false,xx,yy+th/2,DTA_DestWidth,150*CleanXFac_1,DTA_DestHeight,th+4*CleanYFac_1,DTA_Rotate,270,DTA_LegacyRenderStyle,STYLE_Shaded,DTA_FillColor,Color(0,0,0),DTA_Alpha,.5,DTA_TopOffset,256,DTA_LeftOffset,128);
		String str = StringTable.Localize("$"..SWWMMODPREFIX.."_INTERKILLS");
		Screen.DrawText(mSmallFont,statbasecolor,xx-80*CleanXFac_1,yy,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
		yy += mSmallFont.GetHeight()*CleanYFac_1;
		str = StatCnt(cnt_kills[0],wbs.maxkills);
		Screen.DrawText(mSmallFont,((wbs.maxkills>0)&&(cnt_kills[0]>=wbs.maxkills))?statcolor1:statcolor0,xx+80*CleanXFac_1-mSmallFont.StringWidth(str)*CleanXFac_1,yy,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
		if ( sp_state < 4 ) return;
		yy += mSmallFont.GetHeight()*CleanYFac_1;
		str = StringTable.Localize("$"..SWWMMODPREFIX.."_INTERITEMS");
		Screen.DrawText(mSmallFont,statbasecolor,xx-80*CleanXFac_1,yy,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
		yy += mSmallFont.GetHeight()*CleanYFac_1;
		str = StatCnt(cnt_items[0],wbs.maxitems);
		Screen.DrawText(mSmallFont,((wbs.maxitems>0)&&(cnt_items[0]>=wbs.maxitems))?statcolor1:statcolor0,xx+80*CleanXFac_1-mSmallFont.StringWidth(str)*CleanXFac_1,yy,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
		if ( sp_state < 6 ) return;
		yy += mSmallFont.GetHeight()*CleanYFac_1;
		str = StringTable.Localize("$"..SWWMMODPREFIX.."_INTERSECRETS");
		Screen.DrawText(mSmallFont,statbasecolor,xx-80*CleanXFac_1,yy,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
		yy += mSmallFont.GetHeight()*CleanYFac_1;
		str = StatCnt(cnt_secret[0],wbs.maxsecret);
		Screen.DrawText(mSmallFont,((wbs.maxsecret>0)&&(cnt_secret[0]>=wbs.maxsecret))?statcolor1:statcolor0,xx+80*CleanXFac_1-mSmallFont.StringWidth(str)*CleanXFac_1,yy,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
		if ( sp_state < 8 ) return;
		yy += mSmallFont.GetHeight()*CleanYFac_1;
		str = "┈┈┄┄╌╌────╌╌┄┄┈┈";
		Screen.DrawText(mSmallFont,statbasecolor,xx-mSmallFont.StringWidth(str)*CleanXFac_1/2,yy,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
		yy += mSmallFont.GetHeight()*CleanYFac_1;
		str = StringTable.Localize("$"..SWWMMODPREFIX.."_INTERTIME");
		Screen.DrawText(mSmallFont,statbasecolor,xx-80*CleanXFac_1,yy,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
		str = TimeStr(max(cnt_time,0));
		Screen.DrawText(mSmallFont,(wbs.partime&&(cnt_time<=(wbs.partime/GameTicRate)))?statcolor1:((wbs.sucktime>0)&&(cnt_time>(wbs.sucktime*3600)))?statcolor2:statcolor0,xx+80*CleanXFac_1-mSmallFont.StringWidth(str)*CleanXFac_1,yy,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
		if ( wbs.partime )
		{
			yy += mSmallFont.GetHeight()*CleanYFac_1;
			str = StringTable.Localize("$"..SWWMMODPREFIX.."_INTERPAR");
			Screen.DrawText(mSmallFont,statbasecolor,xx-80*CleanXFac_1,yy,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
			str = TimeStr(max(cnt_par,0));
			Screen.DrawText(mSmallFont,statcolor0,xx+80*CleanXFac_1-mSmallFont.StringWidth(str)*CleanXFac_1,yy,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
		}
		if ( wbs.totaltime == Plrs[me].stime ) return;
		yy += mSmallFont.GetHeight()*CleanYFac_1;
		str = StringTable.Localize("$"..SWWMMODPREFIX.."_INTERTOTAL");
		Screen.DrawText(mSmallFont,statbasecolor,xx-80*CleanXFac_1,yy,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
		str = TimeStr(max(cnt_total_time,0));
		Screen.DrawText(mSmallFont,statcolor0,xx+80*CleanXFac_1-mSmallFont.StringWidth(str)*CleanXFac_1,yy,str,DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1);
	}

	private void drawSWWMFg()
	{
		// intermission tips at the bottom
		if ( !whichtip )
		{
			int maxtip = StringTable.Localize("$"..SWWMMODPREFIX.."_NINTERTIP").ToInt();
			if ( maxtip <= 0 ) return;
			let shnd = SWWMStaticHandler(StaticEventHandler.Find("SWWMStaticHandler"));
			Array<Int> ents;
			ents.Clear();
			for ( int i=1; i<=maxtip; i++ ) ents.Push(i);
			if ( shnd.lasttip.Size() >= maxtip )
			{
				// exclude last one, start over
				int excludeme = shnd.lasttip[shnd.lasttip.Size()-1];
				ents.Delete(excludeme-1);
				shnd.lasttip.Clear();
			}
			else
			{
				for ( int i=0; i<shnd.lasttip.Size(); i++ )
				{
					int f = ents.Find(shnd.lasttip[i]);
					if ( f != ents.Size() )
						ents.Delete(f);
				}
			}
			whichtip = ents[Random[InterArt](0,ents.Size()-1)];
			tipstr = String.Format(StringTable.Localize("$"..SWWMMODPREFIX.."_INTERTIP"),whichtip).."\n"..StringTable.Localize("$"..SWWMMODPREFIX.."_INTERTIP"..whichtip);
			if ( tipl ) tipl.Destroy();
			shnd.lasttip.Push(whichtip);
		}
		if ( tipalpha > 0. )
		{
			double alf = clamp(tipalpha+(tipalphastate*fractic)/GameTicRate,0.,1.);
			if ( !tipl ) tipl = mSmallFont.BreakLines(tipstr,600);
			int lw = 0;
			for ( int i=0; i<tipl.Count(); i++ )
				if ( tipl.StringWidth(i) > lw )
					lw = tipl.StringWidth(i);
			double xx = (Screen.GetWidth()-lw*CleanXFac_1)/2;
			double yy = Screen.GetHeight()-60*CleanYFac_1;
			yy -= (tipl.Count()-1)*mSmallFont.GetHeight();
			if ( !gradtex ) gradtex = TexMan.CheckForTexture("graphics/title_grad.png",TexMan.Type_Any);
			Screen.DrawTexture(gradtex,false,Screen.GetWidth()/2,yy+mSmallFont.GetHeight()*tipl.Count()*CleanYFac_1/2.,DTA_DestWidth,450*CleanXFac_1,DTA_DestHeight,(mSmallFont.GetHeight()*tipl.Count()+8)*CleanYFac_1,DTA_Rotate,90,DTA_LegacyRenderStyle,STYLE_Shaded,DTA_FillColor,Color(0,0,0),DTA_Alpha,.8*alf,DTA_TopOffset,256,DTA_LeftOffset,128);
			Screen.DrawTexture(gradtex,false,Screen.GetWidth()/2,yy+mSmallFont.GetHeight()*tipl.Count()*CleanYFac_1/2.,DTA_DestWidth,450*CleanXFac_1,DTA_DestHeight,(mSmallFont.GetHeight()*tipl.Count()+8)*CleanYFac_1,DTA_Rotate,270,DTA_LegacyRenderStyle,STYLE_Shaded,DTA_FillColor,Color(0,0,0),DTA_Alpha,.8*alf,DTA_TopOffset,256,DTA_LeftOffset,128);
			double alph;
			if ( tipflash && (gametic < tipflash) ) alph = max((tipflash-(gametic+fractic))/25.,0.)**1.5;
			for ( int i=0; i<tipl.Count(); i++ )
			{
				Screen.DrawText(mSmallFont,(i==0)?tipcolor0:tipcolor1,xx,yy,tipl.StringAt(i),DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1,DTA_Alpha,alf);
				if ( tipflash && (gametic < tipflash) )
					Screen.DrawText(mSmallFont,Font.FindFontColor('MiniHUDFlash'),xx,yy,tipl.StringAt(i),DTA_ScaleX,CleanXFac_1,DTA_ScaleY,CleanYFac_1,DTA_LegacyRenderStyle,STYLE_Add,DTA_Alpha,alf*alph);
				yy += mSmallFont.GetHeight()*CleanYFac_1;
				if ( i == 0 ) xx += 16*CleanXFac_1;
			}
		}
	}

	override void Drawer( void )
	{
		switch ( CurState )
		{
		case StatCount:
			drawSWWMBg();
			drawLF();
			drawStats();
			drawSWWMFg();
			break;
		case ShowNextLoc:
		case LeavingIntermission:
		case NoState:
			drawSWWMBg();
			drawLF();
			drawStats();
			if ( !bNoDrawNextLoc ) drawEL();
			drawSWWMFg();
			break;
		}
		if ( glarestr > 0 ) Screen.Dim(glarecolor,(clamp((glarestr-fractic)/20.,0.,1.)**2)*.3,0,0,Screen.GetWidth(),Screen.GetHeight());
	}

	override void Draw( double smoothratio )
	{
		FracTic = smoothratio;
		Drawer();
	}

	override void Ticker( void )
	{
		bcnt++;
		if ( bcnt == 1 ) StartMusic();
		glarestr = max(glarestr-1,0);
		tipalpha = min(tipalpha+tipalphastate/double(GameTicRate),2.);
		switch (CurState)
		{
		case StatCount:
			tipalphastate = 1;
			updateStats();
			break;
		case ShowNextLoc:
			updateShowNextLoc();
			break;
		case NoState:
			tipalphastate = -2;
			updateNoState();
			break;
		case LeavingIntermission:
			// sorry nothing
			break;
		}
	}

	override bool OnEvent( InputEvent evt )
	{
		if ( evt.type == InputEvent.Type_KeyDown )
		{
			String cmd = Bindings.GetBinding(evt.KeyScan);
			if ( (cmd ~== "+use") || (cmd ~== "+attack") || (cmd ~== "+altattack") )
			{
				accelerateStage = 1;
				return true;
			}
			if ( (cmd ~== "+reload") || (cmd ~== "+zoom") )
			{
				PlaySound("misc/chat");
				whichtip = 0;
				tipflash = gametic+25;
				return true;
			}
			return false;
		}
		return false;
	}

	override void updateNoState()
	{
		// make sure tip alpha is zero, so this transition is less jarring
		if ( tipalpha > 0. ) return;
		Super.updateNoState();
	}

	override void initShowNextLoc()
	{
		if ( wbs.next == "" )
		{
			// the base statscreen skips directly here, which looks
			// very jarring with this one, so just skip to NoState
			bNoDrawNextLoc = true;
			initNoState();
			return;
		}
		CurState = ShowNextLoc;
		acceleratestage = 0;
		cnt = SHOWNEXTLOCDELAY*GameTicRate;
		noautostartmap = false;
	}

	override void initStats()
	{
		CurState = StatCount;
		acceleratestage = 0;
		sp_state = 0;
		cnt_kills[0] = cnt_items[0] = cnt_secret[0] = -1;
		cnt_time = cnt_par = -1;
		cnt_pause = GameTicRate*2;
		cnt_total_time = -1;
	}
	override void updateStats()
	{
		if ( sp_state == 0 )
		{
			if ( bcnt > GameTicRate )
			{
				S_StartSound("misc/interstart",CHAN_WEAPON,CHANF_OVERLAP|CHANF_UI,1.,0.);
				acceleratestage = 0;
				glarestr = 20;
				sp_state++;
			}
			return;
		}
		if ( acceleratestage && (sp_state != 10) )
		{
			acceleratestage = 0;
			sp_state = 10;
			S_StartSound("misc/ricochet",CHAN_VOICE,CHANF_OVERLAP|CHANF_UI,1.,0.);
			glarestr = 10;
			cnt_kills[0] = Plrs[me].skills;
			cnt_items[0] = Plrs[me].sitems;
			cnt_secret[0] = Plrs[me].ssecret;
			cnt_time = Thinker.Tics2Seconds(Plrs[me].stime);
			cnt_par = wbs.partime/GameTicRate;
			cnt_total_time = Thinker.Tics2Seconds(wbs.totaltime);
		}
		if ( sp_state == 2 )
		{
			cnt_kills[0] += max((Plrs[me].skills-cnt_kills[0])/GameTicRate,1);
			if ( !((sndcnt++)%4) )
			{
				S_StartSound("misc/ricochet",CHAN_VOICE,CHANF_OVERLAP|CHANF_UI,1.,0.);
				glarestr = 5;
			}
			if ( cnt_kills[0] >= Plrs[me].skills )
			{
				cnt_kills[0] = Plrs[me].skills;
				glarestr = 10;
				sp_state++;
			}
		}
		else if ( sp_state == 4 )
		{
			cnt_items[0] += max((Plrs[me].sitems-cnt_items[0])/GameTicRate,1);
			if ( !((sndcnt++)%4) )
			{
				S_StartSound("misc/ricochet",CHAN_VOICE,CHANF_OVERLAP|CHANF_UI,1.,0.);
				glarestr = 5;
			}
			if ( cnt_items[0] >= Plrs[me].sitems )
			{
				cnt_items[0] = Plrs[me].sitems;
				glarestr = 10;
				sp_state++;
			}
		}
		else if ( sp_state == 6 )
		{
			cnt_secret[0] += max((Plrs[me].ssecret-cnt_secret[0])/GameTicRate,1);
			if ( !((sndcnt++)%4) )
			{
				S_StartSound("misc/ricochet",CHAN_VOICE,CHANF_OVERLAP|CHANF_UI,1.,0.);
				glarestr = 5;
			}
			if ( cnt_secret[0] >= Plrs[me].ssecret )
			{
				cnt_secret[0] = Plrs[me].ssecret;
				glarestr = 10;
				sp_state++;
			}
		}
		else if ( sp_state == 8 )
		{
			int sec = Thinker.Tics2Seconds(Plrs[me].stime);
			int tsec = Thinker.Tics2Seconds(wbs.totaltime);
			int psec = wbs.partime/GameTicRate;
			if ( !((sndcnt++)%4) )
			{
				S_StartSound("misc/ricochet",CHAN_VOICE,CHANF_OVERLAP|CHANF_UI,1.,0.);
				glarestr = 5;
			}
			cnt_time += max((sec-cnt_time)/GameTicRate,1);
			cnt_par += max((psec-cnt_par)/GameTicRate,1);
			cnt_total_time += max((tsec-cnt_total_time)/GameTicRate,1);
			if ( cnt_time >= sec ) cnt_time = sec;
			if ( cnt_total_time >= tsec ) cnt_total_time = tsec;
			if ( cnt_par >= psec )
			{
				cnt_par = psec;
				if ( cnt_time >= sec )
				{
					cnt_total_time = tsec;
					glarestr = 10;
					sp_state++;
				}
			}
		}
		else if ( sp_state == 10 )
		{
			if ( acceleratestage )
			{
				S_StartSound("misc/interdone",CHAN_WEAPON,CHANF_OVERLAP|CHANF_UI,1.,0.);
				glarestr = 20;
				initShowNextLoc();
			}
		}
		else if ( sp_state&1 )
		{
			if ( !--cnt_pause )
			{
				sp_state++;
				cnt_pause = GameTicRate;
				sndcnt = 0;
			}
		}
	}
}
