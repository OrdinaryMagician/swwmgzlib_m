// credits menu
Class SWWMCreditsEntry ui
{
	String title;
	bool hasicon;
	TextureID itex;
	int iheight;
	BrokenLines btext;
	int width, height;
	int titlecol, btextcol;
	Font mSmallFont;

	SWWMCreditsEntry Init( String t, String b = "", int c1 = SWWMCREDITSCOL1, int c2 = SWWMCREDITSCOL2, String icon = "", int iconheight = 0 )
	{
		mSmallFont = Font.GetFont('TewiFont');
		if ( icon != "" )
		{
			itex = TexMan.CheckForTexture(icon,TexMan.Type_Any);
			if ( itex.IsValid() )
			{
				hasicon = true;
				if ( iconheight ) iheight = iconheight;
				else
				{
					Vector2 ofs = TexMan.GetScaledOffset(itex);
					iheight = int(ofs.y);
				}
			}
		}
		titlecol = c1;
		btextcol = c2;
		title = StringTable.Localize(t);
		if ( b == "" )
		{
			width = CalcWidth();
			height = CalcHeight();
			return self;
		}
		String b2 = StringTable.Localize(b);
		btext = mSmallFont.BreakLines(b2,320);
		width = CalcWidth();
		height = CalcHeight();
		return self;
	}

	override void OnDestroy()
	{
		Super.OnDestroy();
		if ( btext ) btext.Destroy();
	}

	protected virtual int CalcWidth()
	{
		int len = mSmallFont.StringWidth(title);
		if ( !btext ) return len;
		for ( int i=0; i<btext.Count(); i++ )
		{
			int len2 = btext.StringWidth(i);
			if ( len2 > len ) len = len2;
		}
		return len;
	}

	protected virtual int CalcHeight()
	{
		int h = 0;
		if ( hasicon ) h = iheight;
		h += mSmallFont.GetHeight();
		if ( !btext ) return h;
		h += 6;
		h += mSmallFont.GetHeight()*btext.Count();
		return h;
	}

	virtual double Draw( Vector2 ss, double x, double y )
	{
		// don't draw if we're offscreen, saves time
		if ( (y+height < 0) || (y > ss.y) ) return height;
		double yy = y;
		if ( hasicon )
		{
			yy += iheight;
			Screen.DrawTexture(itex,true,x+1,yy+1,DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true,DTA_ColorOverlay,Color(255,0,0,0));
			Screen.DrawTexture(itex,true,x,yy,DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true);
		}
		int w = mSmallFont.StringWidth(title);
		double xx = x-w/2;
		Screen.DrawText(mSmallFont,titlecol,xx,yy,title,DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true);
		if ( !btext ) return height;
		// underline
		int cw = int(ceil((w+8)/6.))*6;
		xx = x-cw/2;
		for ( int i=0; i<cw; i+=6 )
			Screen.DrawChar(mSmallFont,titlecol,xx+i,yy+6,0x5F,DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true);
		yy += mSmallFont.GetHeight()+6;
		for ( int i=0; i<btext.Count(); i++ )
		{
			xx = x-(btext.StringWidth(i))/2;
			Screen.DrawText(mSmallFont,btextcol,xx,yy,btext.StringAt(i),DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true);
			yy += mSmallFont.GetHeight();
		}
		return height;
	}
}

// we're making this a barebones class so the mods can edit it as needed
Class SWWMCreditsMenu : GenericMenu abstract
{
	TextureID bgtex;
	TextureID logo;
	String stitle, stitle2;
	String sdev, sassets, smusic, sfanart, slocal, spatrons, sthanks;
	Array<SWWMCreditsEntry> cdev, cassets, cmusic, cfanart, clocal, cpatrons, cthanks;
	Vector2 ss;
	double hs;
	int logow, logoh;
	int logoyofs;
	Font mSmallFont, mBigFont;

	String oldmus;
	int oldorder;
	bool oldloop;
	bool muschanged;

	const ENTRY_PAD = 8;
	const SECTION_PAD = 20;
	const SECTION_SHIFT = -4;

	double spos, speed;
	int theight;

	void UpdateSize()
	{
		hs = max(min(floor(Screen.GetWidth()/640.),floor(Screen.GetHeight()/360.)),1.);
		ss = (Screen.GetWidth(),Screen.GetHeight())/hs;
	}

	virtual void ChildInit( Menu parent )
	{
		// override this in subclass and put your own section contents
	}

	virtual String, int GetCreditsMus()
	{
		// override this in subclass to provide the credits music
		return "", 0;
	}

	override void Init( Menu parent )
	{
		Super.Init(parent);
		mSmallFont = Font.GetFont('TewiFont');
		mBigFont = Font.GetFont('TewiFontOutline');
		bgtex = TexMan.CheckForTexture("graphics/tempbg.png",TexMan.Type_Any);
		UpdateSize();
		logo = TexMan.CheckForTexture("graphics/"..SWWMLOGONAME..".png",TexMan.Type_Any);
		[logow, logoh] = TexMan.GetSize(logo);
		Vector2 ofs = TexMan.GetScaledOffset(logo);
		logoyofs = int(ofs.y);
		stitle = StringTable.Localize("$"..SWWMMODPREFIX.."_CSTITLE");
		stitle2 = StringTable.Localize("$"..SWWMMODPREFIX.."_CSTITLE2");
		sdev = StringTable.Localize("$SWWM_CLEAD");
		sassets = StringTable.Localize("$SWWM_CASSETS");
		smusic = StringTable.Localize("$SWWM_CMUSIC");
		sfanart = StringTable.Localize("$SWWM_CFANART");
		slocal = StringTable.Localize("$SWWM_CLOCAL");
		spatrons = StringTable.Localize("$SWWM_CPATRON");
		sthanks = StringTable.Localize("$SWWM_CTHANK");
		cdev.Push(new("SWWMCreditsEntry").Init("Marisa the Magician","$SWWM_CDEV2",icon:"graphics/Credits/MariSprite.png"));
		cassets.Push(new("SWWMCreditsEntry").Init("Bethesda Game Studios","Fallout: New Vegas\nFallout 4"));
		cassets.Push(new("SWWMCreditsEntry").Init("Epic Games","Unreal\nUnreal Tournament\nUnreal Tournament 2004\nUnreal Tournament 3"));
		cassets.Push(new("SWWMCreditsEntry").Init("Ion Storm","Deus Ex"));
		cassets.Push(new("SWWMCreditsEntry").Init("Looking Glass Studios","Thief\nSystem Shock 2"));
		cassets.Push(new("SWWMCreditsEntry").Init("From Software","Dark Souls\nDark Souls II\nDark Souls III"));
		clocal.Push(new("SWWMCreditsEntry").Init("Marisa the Magician","$SWWM_LOCES"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("Snacks"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("john"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("FireFly"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("Corey Hectus"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("Dac"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("kevansevans"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("Log!"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("Pietro Gagliardi"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("Ryan Weatherman"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("Xada Xephron"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("Zard1084"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("John"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("NekoMithos"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("Ultralight"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("Antlason Widowz"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("bouncytem"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("Brett Saltzer"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("Clint Walker"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("Figo"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("melancholygeek"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("Namsan"));
		cpatrons.Push(new("SWWMCreditsEntry").Init("YaGirlJuniper"));
		ChildInit(parent);
		// these have to appear after the mod-specific credits
		cassets.Push(new("SWWMCreditsEntry").Init("Amuscaria","$SWWM_ASSBARONS"));
		cassets.Push(new("SWWMCreditsEntry").Init("Ryan Cordell","$SWWM_ASSOTHERS"));
		cassets.Push(new("SWWMCreditsEntry").Init("Blox","$SWWM_ASSEXTRA"));
		cassets.Push(new("SWWMCreditsEntry").Init("SiFi270","$SWWM_ASSKEEN"));
		cthanks.Push(new("SWWMCreditsEntry").Init("Marrub","$SWWM_CMAB2",Font.FindFontColor('Heliotrope'),Font.FindFontColor('BlushPink')));
		cthanks.Push(new("SWWMCreditsEntry").Init("KynikossDragonn","$SWWM_CDRAGON2"));
		cthanks.Push(new("SWWMCreditsEntry").Init("Lucy","$SWWM_CLUCY2"));
		cthanks.Push(new("SWWMCreditsEntry").Init("Gutawer","$SWWM_CGUTA2"));
		cthanks.Push(new("SWWMCreditsEntry").Init("KeksDose","$SWWM_CKEKS2"));
		cthanks.Push(new("SWWMCreditsEntry").Init("ZZYZX & Nash","$SWWM_CZN2"));
		cthanks.Push(new("SWWMCreditsEntry").Init("Val Pal","$SWWM_CVAL2"));
		cthanks.Push(new("SWWMCreditsEntry").Init("Kaffy Kathy","$SWWM_CKATHY2"));
		cthanks.Push(new("SWWMCreditsEntry").Init("BouncyTEM","$SWWM_CBOUNCY2"));
		cthanks.Push(new("SWWMCreditsEntry").Init("\ctCptSledge\c- & \cdBunray\c-","$SWWM_CSLEDGE2"));
		cthanks.Push(new("SWWMCreditsEntry").Init("a1337spy","$SWWM_CSPY2"));
		cthanks.Push(new("SWWMCreditsEntry").Init("$SWWM_CINSP1","$SWWM_CINSP2"));
		cthanks.Push(new("SWWMCreditsEntry").Init("$SWWM_CCOMMUNITY1","$SWWM_CCOMMUNITY2"));
		cthanks.Push(new("SWWMCreditsEntry").Init("$SWWM_CDEVS1","$SWWM_CDEVS2"));
		cthanks.Push(new("SWWMCreditsEntry").Init("$SWWM_CYOU1","$SWWM_CYOU2"));
		speed = 16.;
		spos = ss.y-logoh;
		// calc total height
		theight = logoh;
		for ( int i=0; i<cdev.Size(); i++ )
		{
			if ( i == 0 ) theight += SECTION_PAD+mBigFont.GetHeight()*2;
			theight += ENTRY_PAD;
			theight += cdev[i].height;
		}
		for ( int i=0; i<cassets.Size(); i++ )
		{
			if ( i == 0 ) theight += SECTION_PAD+mBigFont.GetHeight()*2;
			theight += ENTRY_PAD;
			theight += cassets[i].height;
		}
		for ( int i=0; i<cmusic.Size(); i++ )
		{
			if ( i == 0 ) theight += SECTION_PAD+mBigFont.GetHeight()*2;
			theight += ENTRY_PAD;
			theight += cmusic[i].height;
		}
		for ( int i=0; i<cfanart.Size(); i++ )
		{
			if ( i == 0 ) theight += SECTION_PAD+mBigFont.GetHeight()*2;
			theight += ENTRY_PAD;
			theight += cfanart[i].height;
		}
		for ( int i=0; i<clocal.Size(); i++ )
		{
			if ( i == 0 ) theight += SECTION_PAD+mBigFont.GetHeight()*2;
			theight += ENTRY_PAD;
			theight += clocal[i].height;
		}
		for ( int i=0; i<cpatrons.Size(); i++ )
		{
			if ( i == 0 ) theight += SECTION_PAD+mBigFont.GetHeight()*2;
			theight += ENTRY_PAD;
			theight += cpatrons[i].height;
		}
		for ( int i=0; i<cthanks.Size(); i++ )
		{
			if ( i == 0 ) theight += SECTION_PAD+mBigFont.GetHeight()*2;
			theight += ENTRY_PAD;
			theight += cthanks[i].height;
		}
		String cmus;
		int ord;
		[cmus, ord] = GetCreditsMus();
		if ( (cmus != "") && (gamestate != GS_TITLELEVEL) )
		{
			// music swap
			oldmus = musplaying.name;
			oldorder = musplaying.baseorder;
			oldloop = musplaying.loop;
			S_ChangeMusic(cmus,ord);
			muschanged = true;
		}
	}
	double DrawLogo( double x, double y )
	{
		// get the offsets so we know where it actually cuts off
		double ly = max(logoyofs,0);
		double hy = -min(-logoyofs,0);
		// don't draw if we're offscreen, saves time
		if ( (y+logoh+hy < 0) || (y-ly > ss.y) ) return logoh;
		Screen.DrawTexture(logo,true,x-logow/2,y,DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true);
		Screen.DrawText(mSmallFont,SWWMCREDITSCOL1,x-mSmallFont.StringWidth(stitle)/2,y+(logoh-28),stitle,DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true);
		// underline
		int w = max(mSmallFont.StringWidth(stitle),mSmallFont.StringWidth(stitle2));
		int cw = int(ceil((w+8)/6.))*6;
		double xx = x-cw/2;
		for ( int i=0; i<cw; i+=6 )
			Screen.DrawChar(mSmallFont,SWWMCREDITSCOL1,xx+i,y+(logoh-22),0x5F,DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true);
		Screen.DrawText(mSmallFont,SWWMCREDITSCOL2,x-mSmallFont.StringWidth(stitle2)/2,y+(logoh-9),stitle2,DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true);
		return logoh;
	}
	double DrawSection( double x, double y, String txt )
	{
		// don't draw if we're offscreen, saves time
		y += SECTION_SHIFT;
		if ( (y+mBigFont.GetHeight()*2 < 0) || (y > ss.y) ) return mBigFont.GetHeight()*2;
		Screen.DrawText(mBigFont,SWWMCREDITSCOL0,x-mBigFont.StringWidth(txt),y,txt,DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true,DTA_ScaleX,2,DTA_ScaleY,2);
		return mBigFont.GetHeight()*2;
	}
	override void Drawer()
	{
		if ( swwm_fuzz )
		{
			Vector2 tsize = TexMan.GetScaledSize(bgtex);
			double zoom = max(ceil(Screen.GetWidth()/tsize.x),ceil(Screen.GetHeight()/tsize.y));
			Vector2 vsize = (Screen.GetWidth(),Screen.GetHeight())/zoom;
			Screen.DrawTexture(bgtex,false,(vsize.x-tsize.x)/2,(vsize.y-tsize.y)/2,DTA_VirtualWidthF,vsize.x,DTA_VirtualHeightF,vsize.y,DTA_KeepRatio,true,DTA_ColorOverlay,Color(192,0,0,0),DTA_Alpha,.8);
		}
		else Screen.Dim("Black",.8,0,0,Screen.GetWidth(),Screen.GetHeight());
		Super.Drawer();
		UpdateSize();
		// logo
		double yy = spos;
		double xx = ss.x/2.;
		yy += DrawLogo(xx,yy);
		// developer
		if ( cdev.Size() )
		{
			yy += SECTION_PAD;
			yy += DrawSection(xx,yy,sdev);
			for ( int i=0; i<cdev.Size(); i++ )
			{
				yy += ENTRY_PAD;
				yy += cdev[i].Draw(ss,xx,yy);
			}
		}
		// assets
		if ( cassets.Size() )
		{
			yy += SECTION_PAD;
			yy += DrawSection(xx,yy,sassets);
			for ( int i=0; i<cassets.Size(); i++ )
			{
				yy += ENTRY_PAD;
				yy += cassets[i].Draw(ss,xx,yy);
			}
		}
		// music
		if ( cmusic.Size() )
		{
			yy += SECTION_PAD;
			yy += DrawSection(xx,yy,smusic);
			for ( int i=0; i<cmusic.Size(); i++ )
			{
				yy += ENTRY_PAD;
				yy += cmusic[i].Draw(ss,xx,yy);
			}
		}
		// fanart
		if ( cfanart.Size() )
		{
			yy += SECTION_PAD;
			yy += DrawSection(xx,yy,sfanart);
			for ( int i=0; i<cfanart.Size(); i++ )
			{
				yy += ENTRY_PAD;
				yy += cfanart[i].Draw(ss,xx,yy);
			}
		}
		// localization
		if ( clocal.Size() )
		{
			yy += SECTION_PAD;
			yy += DrawSection(xx,yy,slocal);
			for ( int i=0; i<clocal.Size(); i++ )
			{
				yy += ENTRY_PAD;
				yy += clocal[i].Draw(ss,xx,yy);
			}
		}
		// patrons
		if ( cpatrons.Size() )
		{
			yy += SECTION_PAD;
			yy += DrawSection(xx,yy,spatrons);
			for ( int i=0; i<cpatrons.Size(); i++ )
			{
				yy += ENTRY_PAD;
				yy += cpatrons[i].Draw(ss,xx,yy);
			}
		}
		// thanks
		if ( cthanks.Size() )
		{
			yy += SECTION_PAD;
			yy += DrawSection(xx,yy,sthanks);
			for ( int i=0; i<cthanks.Size(); i++ )
			{
				yy += ENTRY_PAD;
				yy += cthanks[i].Draw(ss,xx,yy);
			}
		}
	}
	override void Ticker()
	{
		spos -= speed/GameTicRate;
		if ( spos < -theight ) spos = ss.y+max(logoyofs,0);
		if ( spos > ss.y+max(logoyofs,0) ) spos = -theight;
	}
	override bool TranslateKeyboardEvents()
	{
		return false;
	}
	override bool OnUIEvent( UIEvent ev )
	{
		switch ( ev.type )
		{
		case UIEvent.Type_KeyDown:
			if ( ev.KeyChar == UIEvent.Key_Escape )
			{
				// gotta manually send this one
				MenuEvent(MKEY_Back,false);
				return true;
			}
			if ( ev.KeyChar == UIEvent.Key_Backspace )
			{
				spos = (ss.y-logoh)/2;
				speed = 16.;
				return true;
			}
			if ( ev.KeyChar == UIEvent.Key_Down )
			{
				speed = 48.;
				return true;
			}
			if ( ev.KeyChar == UIEvent.Key_PgDn )
			{
				speed = 96.;
				return true;
			}
			if ( ev.KeyChar == UIEvent.Key_Up )
			{
				speed = -48.;
				return true;
			}
			if ( ev.KeyChar == UIEvent.Key_PgUp )
			{
				speed = -96.;
				return true;
			}
			if ( ev.KeyChar == UIEvent.Key_Return )
			{
				speed = 0.;
				return true;
			}
			break;
		case UIEvent.Type_KeyUp:
			if ( (ev.KeyChar == UIEvent.Key_Down) || (ev.KeyChar == UIEvent.Key_Up)
				|| (ev.KeyChar == UIEvent.Key_PgDn) || (ev.KeyChar == UIEvent.Key_PgUp)
				|| (ev.KeyChar == UIEvent.Key_Return) )
			{
				speed = 16.;
				return true;
			}
			break;
		}
		return Super.OnUIEvent(ev);
	}
	override bool MenuEvent( int mkey, bool fromcontroller )
	{
		switch ( mkey )
		{
		case MKEY_Back:
			// reset music
			if ( (gamestate != GS_TITLELEVEL) && muschanged )
				S_ChangeMusic(oldmus,oldorder,oldloop);
			Close();
			let m = GetCurrentMenu();
			MenuSound(m?"menu/backup":"menu/clear");
			if ( !m ) menuDelegate.MenuDismissed();
			return true;
		}
		return false;
	}
}
