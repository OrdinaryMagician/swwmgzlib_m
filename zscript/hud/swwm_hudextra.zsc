// additional hud things

// Press F to Pay Respects
Class PayRespects : HUDMessageBase
{
	Vector2 basepos;
	int lifespan, initialspan, starttic;
	double scale;
	double hs;
	Vector2 ss;
	int seed, seed2;
	Font mSmallFont;

	static PayRespects PressF()
	{
		let f = new("PayRespects");
		f.basepos = (FRandom[FInTheChat](0.,1.),FRandom[FInTheChat](1.02,1.05));
		f.scale = FRandom[FInTheChat](.5,2.);
		f.lifespan = f.initialspan = Random[FInTheChat](20,80);
		f.starttic = level.maptime;
		f.seed = Random[FInTheChat]();
		f.seed2 = Random[FInTheChat]();
		f.ScreenSizeChanged();
		f.mSmallFont = Font.GetFont('TewiFont');
		return f;
	}

	override bool Tick()
	{
		lifespan--;
		return (lifespan<=0);
	}

	override void ScreenSizeChanged()
	{
		hs = CleanXFac*scale;
		ss = (Screen.GetWidth(),Screen.GetHeight())/hs;
	}

	override void Draw( int bottom, int visibility )
	{
		Vector2 realpos = (basepos.x*ss.x,basepos.y*ss.y);
		Vector2 fo = (mSmallFont.StringWidth("F")/2.,-mSmallFont.GetHeight());
		// F rise up
		int initspd = (128-seed);
		if ( (initspd >= 0) && (initspd < 32) ) initspd = 32;
		if ( (initspd < 0) && (initspd > -32) ) initspd = -32;
		int boostup = 32+(seed2/4);
		double fractic = SWWMStatusBar(statusbar)?SWWMStatusBar(statusbar).fractic:0;
		fo.x += (.15*initspd)*((initialspan-(lifespan-fractic))**.6);
		fo.y += ((initialspan-(lifespan-fractic))**1.6)-boostup*sin((90./initialspan)*(level.maptime+fractic-starttic));
		double alph = clamp((lifespan+fractic)/double(initialspan),0.,1.);
		Screen.DrawText(mSmallFont,Font.CR_GREEN,realpos.x-fo.x,realpos.y-fo.y,"F",DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true,DTA_Alpha,alph);
	}
}

// One-liners (now converted into full-on dialogue subtitles)
Class SWWMOneLine
{
	int speaker;
	String whichline;
	transient BrokenLines l;
	int lifespan, curtime;
	int color;
	bool force;
	double nofs, pnofs;

	bool Tick()
	{
		if ( !force && (players[consoleplayer].Health <= 0) ) curtime = int.min;
		pnofs = nofs;
		nofs *= .95;
		curtime--;
		return (curtime<-20);
	}

	override void OnDestroy()
	{
		Super.OnDestroy();
		if ( l ) l.Destroy();
	}
}

Class SWWMOneLiner : HUDMessageBase
{
	Array<SWWMOneLine> lines;
	Font mSmallFont;

	static void AddLine( int speaker, String whichline, int lifespan, int color = Font.CR_UNTRANSLATED, bool force = false )
	{
		// first of all, check if we exist in the status bar
		// this is an ugly way to do it, but haha the only way to "get" a message from the status bar is to detach it (wow, thanks)
		let lr = SWWMOneLiner(StatusBar.DetachMessageID(-3473));
		if ( !lr ) lr = new("SWWMOneLiner");
		if ( !lr.mSmallFont ) lr.mSmallFont = Font.GetFont('TewiFont');
		StatusBar.AttachMessage(lr,-3473);
		// if this speaker has an active line, override it
		SWWMOneLine l;
		for ( int i=0; i<lr.lines.Size(); i++ )
		{
			if ( lr.lines[i].speaker != speaker ) continue;
			l = lr.lines[i];
			break;
		}
		if ( !l )
		{
			l = new("SWWMOneLine");
			lr.lines.Push(l);
		}
		l.speaker = speaker;
		// hack for mod-relative stuff
		String locstr = SWWMMODPREFIX.."_"..whichline;
		if ( StringTable.Localize(locstr,false) == locstr )
		{
			locstr = "SWWM_"..whichline;
			if ( StringTable.Localize(locstr,false) == locstr ) l.whichline = whichline;
			else l.whichline = StringTable.Localize(locstr,false);
		}
		else l.whichline = StringTable.Localize(locstr,false);
		l.curtime = l.lifespan = lifespan;
		l.color = color;
		l.force = force;
	}

	override void OnDestroy()
	{
		Super.OnDestroy();
		for ( int i=0; i<lines.Size(); i++ )
		{
			if ( !lines[i] ) continue;
			lines[i].Destroy();
		}
	}

	override bool Tick()
	{
		bool deleteme = true;
		for ( int i=0; i<lines.Size(); i++ )
		{
			if ( !lines[i].Tick() )
			{
				deleteme = false;
				continue;
			}
			lines[i].Destroy();
			lines.Delete(i);
			i--;
		}
		return deleteme;
	}

	override void ScreenSizeChanged()
	{
		for ( int i=0; i<lines.Size(); i++ )
			lines[i].l.Destroy();
	}

	override void Draw( int bottom, int visibility )
	{
		int margin = clamp(swwm_hudmargin,0,40);
		double hs = max(min(floor(Screen.GetWidth()/640.),floor(Screen.GetHeight()/360.)),1.);
		Vector2 ss = (Screen.GetWidth()/hs,Screen.GetHeight()/hs);
		double fractic = SWWMStatusBar(statusbar)?SWWMStatusBar(statusbar).fractic:0;
		double rofs = 0;
		int h = mSmallFont.GetHeight();
		for ( int i=0; i<lines.Size(); i++ )
		{
			let ln = lines[i];
			ln.pnofs = max(ln.pnofs,rofs);
			ln.nofs = max(ln.nofs,rofs);
			double nofs = SWWMUtility.Lerp(ln.pnofs,ln.nofs,fractic);
			// don't draw empty strings
			if ( ln.whichline == "" ) continue;
			// split so it can fit
			if ( !ln.l ) ln.l = mSmallFont.BreakLines(ln.whichline,int(ss.x*.5));
			int maxlen = 0;
			for ( int j=0; j<ln.l.Count(); j++ )
			{
				int len = mSmallFont.StringWidth(ln.l.StringAt(j));
				if ( len > maxlen ) maxlen = len;
			}
			int fh = h*ln.l.Count();
			double fcurtime = ln.curtime-fractic;
			double alph = clamp((fcurtime/20.)+1.,0.,1.);
			alph *= clamp((ln.lifespan-fcurtime)/10.,0.,1.);
			Screen.Dim("Black",alph*.8,int((Screen.GetWidth()-(maxlen+12)*hs)/2.),int(bottom-(margin+2+fh+nofs)*hs),int((maxlen+12)*hs),int((fh+4)*hs));
			int yy = int(margin+fh+nofs);
			for ( int j=0; j<ln.l.Count(); j++ )
			{
				int len = mSmallFont.StringWidth(ln.l.StringAt(j));
				Screen.DrawText(mSmallFont,ln.color,int((ss.x-len)/2.),(bottom/hs)-yy,ln.l.StringAt(j),DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true,DTA_Alpha,alph);
				yy -= h;
			}
			rofs += (fh+6);
		}
	}
}

// Screen flashes from DT
Class GenericFlash : HUDMessageBase
{
	Color col;
	int duration;
	double alpha;
	Actor cam;

	GenericFlash Setup( Actor camera, Color c, int d )
	{
		alpha = 1.0;
		col = c;
		duration = d;
		cam = camera;
		return self;
	}
	override bool Tick()
	{
		if ( duration > 0 ) alpha -= 1./duration;
		return (alpha<=0)||(!cam);
	}
	override void Draw( int bottom, int visibility )
	{
		if ( automapactive || (visibility != BaseStatusBar.HUDMSGLayer_UnderHUD) ) return;
		if ( cam && (players[consoleplayer].camera != cam) ) return;
		Screen.Dim(col,(col.a/255.)*alpha*swwm_flashstrength,0,0,Screen.GetWidth(),Screen.GetHeight(),STYLE_Add);
	}
}

Class QueuedFlash
{
	Color c;
	int duration;
	int tic;
	Actor cam;
}

// weapon tooltips
Class SWWMWeaponTooltip : HUDMessageBase
{
	String wpn, txt;
	double tics, holdtics, fadeintics, fadeouttics;
	transient BrokenLines l;
	SWWMWeaponTooltip next;
	Font mSmallFont, mBigFont;

	SWWMWeaponTooltip Init( Class<SWWMWeapon> weapon )
	{
		let def = GetDefaultByType(weapon);
		wpn = def.GetTag();
		txt = StringTable.Localize(def.tooltip);
		holdtics = 160;
		fadeintics = 5;
		fadeouttics = 15;
		tics = -10;
		mSmallFont = Font.GetFont('TewiFont');
		mBigFont = Font.GetFont('TewiFontOutline');
		return self;
	}

	override bool Tick()
	{
		bool clearme = (++tics > holdtics+fadeintics+fadeouttics);
		if ( clearme && next ) StatusBar.AttachMessage(next,-2910);
		return clearme;
	}

	override void Draw( int bottom, int visibility )
	{
		if ( tics <= 0 ) return;
		double hs = max(min(floor(Screen.GetWidth()/640.),floor(Screen.GetHeight()/360.))-1.,1.);
		Vector2 ss = (Screen.GetWidth(),Screen.GetHeight())/hs;
		double fractic = SWWMStatusBar(statusbar)?SWWMStatusBar(statusbar).fractic:0;
		double ftics = tics+fractic;
		double alpha = (ftics<fadeintics)?(ftics/fadeintics):(ftics<(fadeintics+holdtics))?1.:(1.-(ftics-(fadeintics+holdtics))/fadeouttics);
		int w = mBigFont.StringWidth(wpn)*2;
		if ( !l ) l = mSmallFont.BreakLines(txt,600);
		int w1 = w;
		int w2 = 0, w3 = 0;
		w = 0;
		for ( int i=0; i<l.Count(); i++ )
		{
			let lw = mSmallFont.StringWidth(l.StringAt(i));
			if ( lw > w ) w = lw;
			if ( (i == 0) && (lw > w3) ) w3 = lw;
			else if ( (i > 0) && (lw > w2) ) w2 = lw;
		}
		int cw = int(ceil((max(w1,w)+8)/6.))*6;
		int h = mBigFont.GetHeight()*2+8+mSmallFont.GetHeight()*l.Count();
		Vector2 pos = (int(ss.x/2),ss.y-(swwm_hudmargin+60+h));
		Screen.Dim("Black",.5*alpha,int((pos.x-(cw+4)/2)*hs),int((pos.y-2)*hs),int((cw+4)*hs),int((h+4)*hs));
		Screen.DrawText(mBigFont,SWWMCREDITSCOL1,pos.x-w1/2,pos.y,wpn,DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true,DTA_Alpha,alpha,DTA_ScaleX,2.,DTA_ScaleY,2.);
		for ( int i=0; i<cw; i+=6 )
			Screen.DrawChar(mSmallFont,SWWMCREDITSCOL1,(pos.x-cw/2)+i,pos.y+20,0x5F,DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true,DTA_Alpha,alpha);
		pos.y += mBigFont.GetHeight()*2+8;
		for ( int i=0; i<l.Count(); i++ )
		{
			Screen.DrawText(mSmallFont,Font.CR_WHITE,pos.x-((i>0)?(w2/2):(w3/2)),pos.y,l.StringAt(i),DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true,DTA_Alpha,alpha);
			pos.y += mSmallFont.GetHeight();
		}
	}
}

// I'm just doing this as an experiment, don't mind me

Class DSMapTitle : HUDMessageBase
{
	Struct FntGlyph
	{
		int x, y, width, height, xofs, yofs, advance;
	};

	TextureID atlas, atlas_sub;
	FntGlyph glyphs[256], glyphs_sub[256];
	int fheight, fheight_sub;

	String txt, txtsub;
	int tics, holdtics, fadeintics, fadeouttics;
	int ultics;

	// all the actual hard code
	int MyStringWidth( String str )
	{
		int w = 0;
		int lw = 0;
		int len = str.CodePointCount();
		for ( int i=0, pos=0; i<len; i++ )
		{
			int ch;
			[ch, pos] = str.GetNextCodePoint(pos);
			if ( ch > 255 ) continue;
			lw += glyphs[ch].advance;
			// newline, restart line width
			if ( ch == 0x0a )
			{
				w = max(w,lw);
				lw = 0;
			}
		}
		w = max(w,lw);
		return w;
	}
	int MySubStringWidth( String str )
	{
		int w = 0;
		int lw = 0;
		int len = str.CodePointCount();
		for ( int i=0, pos=0; i<len; i++ )
		{
			int ch;
			[ch, pos] = str.GetNextCodePoint(pos);
			if ( ch > 255 ) continue;
			lw += glyphs_sub[ch].advance;
			// newline, restart line width
			if ( ch == 0x0a )
			{
				w = max(w,lw);
				lw = 0;
			}
		}
		w = max(w,lw);
		return w;
	}
	void MyDrawText( String str, double x, double y, Vector2 ss, double alpha = 1. )
	{
		int len = str.CodePointCount();
		double xx = x;
		double yy = y;
		for ( int i=0, pos=0; i<len; i++ )
		{
			int ch;
			[ch, pos] = str.GetNextCodePoint(pos);
			if ( ch > 255 ) continue;
			if ( glyphs[ch].width && glyphs[ch].height )
			{
				Screen.DrawTexture(atlas,false,xx-glyphs[ch].xofs,yy-glyphs[ch].yofs,
					DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true,
					DTA_SrcX,glyphs[ch].x,DTA_SrcY,glyphs[ch].y,
					DTA_SrcWidth,glyphs[ch].width,DTA_SrcHeight,glyphs[ch].height,
					DTA_DestWidth,glyphs[ch].width,DTA_DestHeight,glyphs[ch].height,
					DTA_Alpha,alpha);
			}
			xx += glyphs[ch].advance;
			// newline
			if ( ch == 0x0a )
			{
				xx = x;
				yy += fheight;
			}
		}
	}
	void MySubDrawText( String str, double x, double y, Vector2 ss, double alpha = 1. )
	{
		int len = str.CodePointCount();
		double xx = x;
		double yy = y;
		for ( int i=0, pos=0; i<len; i++ )
		{
			int ch;
			[ch, pos] = str.GetNextCodePoint(pos);
			if ( ch > 255 ) continue;
			if ( glyphs_sub[ch].width && glyphs_sub[ch].height )
			{
				Screen.DrawTexture(atlas_sub,false,xx-glyphs_sub[ch].xofs,yy-glyphs_sub[ch].yofs,
					DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true,
					DTA_SrcX,glyphs_sub[ch].x,DTA_SrcY,glyphs_sub[ch].y,
					DTA_SrcWidth,glyphs_sub[ch].width,DTA_SrcHeight,glyphs_sub[ch].height,
					DTA_DestWidth,glyphs_sub[ch].width,DTA_DestHeight,glyphs_sub[ch].height,
					DTA_Alpha,alpha);
			}
			xx += glyphs_sub[ch].advance;
			// newline
			if ( ch == 0x0a )
			{
				xx = x;
				yy += fheight_sub;
			}
		}
	}
	// stretches the "_" glyph over a specific width, center-aligned
	void DrawUnderline( double x, double y, Vector2 ss, double width, double alpha = 1. )
	{
		double xx = x-width/2;
		// l stem
		Screen.DrawTexture(atlas,false,xx-4,y,
			DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true,
			DTA_SrcX,glyphs[95].x,DTA_SrcY,glyphs[95].y,
			DTA_SrcWidth,4,DTA_SrcHeight,glyphs[95].height,
			DTA_DestWidthF,4,DTA_DestHeight,glyphs[95].height,
			DTA_Alpha,alpha);
		// long
		Screen.DrawTexture(atlas,false,xx,y,
			DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true,
			DTA_SrcX,glyphs[95].x+4,DTA_SrcY,glyphs[95].y,
			DTA_SrcWidth,glyphs[95].width-8,DTA_SrcHeight,glyphs[95].height,
			DTA_DestWidthF,width,DTA_DestHeight,glyphs[95].height,
			DTA_Alpha,alpha);
		// r stem
		Screen.DrawTexture(atlas,false,xx+width,y,
			DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true,
			DTA_SrcX,glyphs[95].x+(glyphs[95].width-4),DTA_SrcY,glyphs[95].y,
			DTA_SrcWidth,4,DTA_SrcHeight,glyphs[95].height,
			DTA_DestWidthF,4,DTA_DestHeight,glyphs[95].height,
			DTA_Alpha,alpha);
	}

	DSMapTitle Init()
	{
		txt = level.levelname;
		txtsub = level.authorname;
		if ( txt.Left(1) == "$" ) txt = StringTable.Localize(txt);
		if ( txtsub.Left(1) == "$" ) txtsub = StringTable.Localize(txtsub);
		tics = -10;
		holdtics = 140;
		fadeintics = 20;
		fadeouttics = 40;
		ultics = 50;
		atlas = TexMan.CheckForTexture("graphics/dsmapfont.png",TexMan.Type_Any);
		if ( !atlas.IsValid() || atlas.IsNull() ) ThrowAbortException("font atlas texture not found");
		let lmp = Wads.CheckNumForFullname("graphics/dsmapfont.txt");
		if ( lmp == -1 ) ThrowAbortException("font definition file not found");
		String dat = Wads.ReadLump(lmp);
		Array<String> list, ln;
		// fucking Windows
		dat.Replace("\r","");
		list.Clear();
		dat.Split(list,"\n");
		int ch = 0;
		for ( int i=0; i<list.Size(); i++ )
		{
			if ( (list[i].Length() == 0) || (list[i].Left(2) == "//") || (list[i].Left(1) == "") )
				continue;
			if ( i == 0 )
			{
				// first line is always font height
				fheight = list[i].ToInt();
				continue;
			}
			ln.Clear();
			list[i].Split(ln," ",0);
			glyphs[ch].x = ln[0].ToInt();
			glyphs[ch].y = ln[1].ToInt();
			glyphs[ch].width = ln[2].ToInt();
			glyphs[ch].height = ln[3].ToInt();
			glyphs[ch].xofs = ln[4].ToInt();
			glyphs[ch].yofs = ln[5].ToInt();
			glyphs[ch].advance = ln[6].ToInt();
			ch++;
		}
		if ( ch != 256 ) ThrowAbortException("font definition does not list all 256 glyphs");
		atlas_sub = TexMan.CheckForTexture("graphics/dsmapfont_sub.png",TexMan.Type_Any);
		if ( !atlas_sub.IsValid() || atlas_sub.IsNull() ) ThrowAbortException("sub font atlas texture not found");
		lmp = Wads.CheckNumForFullname("graphics/dsmapfont_sub.txt");
		if ( lmp == -1 ) ThrowAbortException("sub font definition file not found");
		dat = Wads.ReadLump(lmp);
		// fucking Windows
		dat.Replace("\r","");
		list.Clear();
		dat.Split(list,"\n");
		ch = 0;
		for ( int i=0; i<list.Size(); i++ )
		{
			if ( (list[i].Length() == 0) || (list[i].Left(2) == "//") || (list[i].Left(1) == "") )
				continue;
			if ( i == 0 )
			{
				// first line is always font height
				fheight_sub = list[i].ToInt();
				continue;
			}
			ln.Clear();
			list[i].Split(ln," ",0);
			glyphs_sub[ch].x = ln[0].ToInt();
			glyphs_sub[ch].y = ln[1].ToInt();
			glyphs_sub[ch].width = ln[2].ToInt();
			glyphs_sub[ch].height = ln[3].ToInt();
			glyphs_sub[ch].xofs = ln[4].ToInt();
			glyphs_sub[ch].yofs = ln[5].ToInt();
			glyphs_sub[ch].advance = ln[6].ToInt();
			ch++;
		}
		if ( ch != 256 ) ThrowAbortException("sub font definition does not list all 256 glyphs");
		return self;
	}

	override bool Tick()
	{
		if ( tics == 0 ) S_StartSound("misc/newarea",CHAN_VOICE,CHANF_UI,pitch:.75);	// dunno why the source file is pitched up
		return (++tics > holdtics+fadeintics+fadeouttics);
	}

	override void Draw( int bottom, int visibility )
	{
		if ( tics <= 0 ) return;
		double hs = max(min(floor(Screen.GetWidth()/640.),floor(Screen.GetHeight()/360.)),1.);
		Vector2 ss = (Screen.GetWidth(),Screen.GetHeight())/hs;
		double fractic = SWWMStatusBar(statusbar)?SWWMStatusBar(statusbar).fractic:0;
		double ftics = tics+fractic;
		double alpha = (ftics<fadeintics)?(ftics/fadeintics):(ftics<(fadeintics+holdtics))?1.:(1.-(ftics-(fadeintics+holdtics))/fadeouttics);
		int w = MyStringWidth(txt);
		int w2 = MySubStringWidth(txtsub);
		double xx = int(ss.x/2.);
		double yy = int(ss.y/2.)-64.;
		double wfact = clamp(ftics/double(ultics),0.,1.);
		DrawUnderline(xx,yy+1,ss,(w+32)*wfact,alpha);
		MyDrawText(txt,xx-w/2,yy,ss,alpha);
		MySubDrawText(txtsub,xx-w2/2,yy+fheight_sub+12,ss,alpha);
	}
}
